{"ast":null,"code":"import _objectSpread from\"C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Chatbot Service for TechAcademy\nclass ChatbotService{constructor(){this.config=void 0;this.conversationHistory=[];this.config={apiKey:process.env.REACT_APP_OPENAI_API_KEY||'',model:'gpt-3.5-turbo',temperature:0.7,maxTokens:500};}// Update API key\nupdateApiKey(apiKey){this.config.apiKey=apiKey;}// Get conversation history\ngetConversationHistory(){return this.conversationHistory;}// Clear conversation\nclearConversation(){this.conversationHistory=[];}// Add message to history\naddMessage(content,role){let type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'text';const message={id:Date.now().toString(),content,role,timestamp:new Date(),type};this.conversationHistory.push(message);return message;}// Generate system prompt for TechAcademy\ngetSystemPrompt(){return\"You are TechAcademy AI Assistant, a helpful chatbot for a technology education platform. Your role is to:\\n\\n1. **Course Information**: Provide details about our programs:\\n   - Digital Transformation (6 months, Free)\\n   - Cloud & DevOps (7 months, \\u20B915,999)\\n   - Cyber Security (8 months, \\u20B918,999)\\n   - Project Management (5 months, \\u20B912,999)\\n\\n2. **Admissions**: Help with application process, requirements, and enrollment\\n3. **Technical Support**: Answer questions about courses, assessments, and learning paths\\n4. **General Support**: Provide information about internships, placements, and mentorship\\n\\nGuidelines:\\n- Be friendly, professional, and encouraging\\n- Provide accurate information about TechAcademy\\n- If you don't know something, admit it and suggest contacting support\\n- Keep responses concise but helpful\\n- Always maintain a positive, educational tone\\n- Suggest relevant courses or next steps when appropriate\\n\\nCurrent TechAcademy features:\\n- 3-round assessment system (Resume, Communication, Coding)\\n- Expert mentors with 10+ years experience\\n- Industry certifications\\n- Flexible learning options\\n- Global opportunities\\n- 95% success rate with 10,000+ students trained\";}// Send message to LLM\nasync sendMessage(userMessage){try{if(!this.config.apiKey){return{message:\"Please configure your API key first. Go to settings to add your OpenAI API key.\",error:\"API key not configured\"};}// Add user message to history\nthis.addMessage(userMessage,'user');// Prepare messages for API\nconst messages=[{role:'system',content:this.getSystemPrompt()},...this.conversationHistory.slice(-10).map(msg=>({role:msg.role,content:msg.content}))];// Call OpenAI API\nconst response=await fetch('https://api.openai.com/v1/chat/completions',{method:'POST',headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(this.config.apiKey)},body:JSON.stringify({model:this.config.model,messages:messages,temperature:this.config.temperature,max_tokens:this.config.maxTokens})});if(!response.ok){var _errorData$error;const errorData=await response.json();throw new Error(((_errorData$error=errorData.error)===null||_errorData$error===void 0?void 0:_errorData$error.message)||'Failed to get response from AI');}const data=await response.json();const aiResponse=data.choices[0].message.content;// Add AI response to history\nthis.addMessage(aiResponse,'assistant');// Generate suggestions based on the conversation\nconst suggestions=this.generateSuggestions(userMessage,aiResponse);return{message:aiResponse,suggestions:suggestions};}catch(error){console.error('Chatbot error:',error);// Add error message to history\nthis.addMessage(\"Error: \".concat(error.message),'assistant','error');return{message:\"I'm sorry, I'm having trouble connecting right now. Please try again later or contact our support team.\",error:error.message};}}// Generate contextual suggestions\ngenerateSuggestions(userMessage,aiResponse){const suggestions=[];const message=userMessage.toLowerCase();const response=aiResponse.toLowerCase();// Course-related suggestions\nif(message.includes('course')||message.includes('program')||message.includes('learn')){suggestions.push('Tell me about Digital Transformation program');suggestions.push('What are the Cloud & DevOps course details?');suggestions.push('How do I apply for Cyber Security program?');}// Assessment-related suggestions\nif(message.includes('assessment')||message.includes('test')||message.includes('exam')){suggestions.push('How does the 3-round assessment work?');suggestions.push('What should I prepare for the coding test?');suggestions.push('Tell me about the resume evaluation process');}// Application-related suggestions\nif(message.includes('apply')||message.includes('enroll')||message.includes('admission')){suggestions.push('What documents do I need to apply?');suggestions.push('How long does the application process take?');suggestions.push('What are the eligibility requirements?');}// General suggestions if no specific context\nif(suggestions.length===0){suggestions.push('What programs do you offer?');suggestions.push('How do I start the assessment?');suggestions.push('Tell me about your mentors');suggestions.push('What are the course fees?');}return suggestions.slice(0,3);// Return max 3 suggestions\n}// Get quick responses for common queries\ngetQuickResponses(){return[{label:'Course Info',message:'Tell me about your programs'},{label:'Assessment',message:'How does the assessment work?'},{label:'Apply Now',message:'How do I apply for a program?'},{label:'Fees',message:'What are the course fees?'},{label:'Mentors',message:'Tell me about your expert mentors'},{label:'Support',message:'I need help with my application'}];}// Check if API key is configured\nisConfigured(){return!!this.config.apiKey;}// Get configuration\ngetConfig(){return _objectSpread({},this.config);}// Update configuration\nupdateConfig(newConfig){this.config=_objectSpread(_objectSpread({},this.config),newConfig);}}// Export singleton instance\nexport const chatbotService=new ChatbotService();export default chatbotService;","map":{"version":3,"names":["ChatbotService","constructor","config","conversationHistory","apiKey","process","env","REACT_APP_OPENAI_API_KEY","model","temperature","maxTokens","updateApiKey","getConversationHistory","clearConversation","addMessage","content","role","type","arguments","length","undefined","message","id","Date","now","toString","timestamp","push","getSystemPrompt","sendMessage","userMessage","error","messages","slice","map","msg","response","fetch","method","headers","concat","body","JSON","stringify","max_tokens","ok","_errorData$error","errorData","json","Error","data","aiResponse","choices","suggestions","generateSuggestions","console","toLowerCase","includes","getQuickResponses","label","isConfigured","getConfig","_objectSpread","updateConfig","newConfig","chatbotService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/chatbotService.ts"],"sourcesContent":["// Chatbot Service for TechAcademy\r\nexport interface ChatMessage {\r\n  id: string;\r\n  content: string;\r\n  role: 'user' | 'assistant';\r\n  timestamp: Date;\r\n  type?: 'text' | 'suggestion' | 'error';\r\n}\r\n\r\nexport interface ChatbotConfig {\r\n  apiKey: string;\r\n  model: string;\r\n  temperature: number;\r\n  maxTokens: number;\r\n}\r\n\r\nexport interface ChatbotResponse {\r\n  message: string;\r\n  suggestions?: string[];\r\n  error?: string;\r\n}\r\n\r\nclass ChatbotService {\r\n  private config: ChatbotConfig;\r\n  private conversationHistory: ChatMessage[] = [];\r\n\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY || '',\r\n      model: 'gpt-3.5-turbo',\r\n      temperature: 0.7,\r\n      maxTokens: 500\r\n    };\r\n  }\r\n\r\n  // Update API key\r\n  updateApiKey(apiKey: string) {\r\n    this.config.apiKey = apiKey;\r\n  }\r\n\r\n  // Get conversation history\r\n  getConversationHistory(): ChatMessage[] {\r\n    return this.conversationHistory;\r\n  }\r\n\r\n  // Clear conversation\r\n  clearConversation() {\r\n    this.conversationHistory = [];\r\n  }\r\n\r\n  // Add message to history\r\n  private addMessage(content: string, role: 'user' | 'assistant', type: 'text' | 'suggestion' | 'error' = 'text'): ChatMessage {\r\n    const message: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      content,\r\n      role,\r\n      timestamp: new Date(),\r\n      type\r\n    };\r\n    this.conversationHistory.push(message);\r\n    return message;\r\n  }\r\n\r\n  // Generate system prompt for TechAcademy\r\n  private getSystemPrompt(): string {\r\n    return `You are TechAcademy AI Assistant, a helpful chatbot for a technology education platform. Your role is to:\r\n\r\n1. **Course Information**: Provide details about our programs:\r\n   - Digital Transformation (6 months, Free)\r\n   - Cloud & DevOps (7 months, ₹15,999)\r\n   - Cyber Security (8 months, ₹18,999)\r\n   - Project Management (5 months, ₹12,999)\r\n\r\n2. **Admissions**: Help with application process, requirements, and enrollment\r\n3. **Technical Support**: Answer questions about courses, assessments, and learning paths\r\n4. **General Support**: Provide information about internships, placements, and mentorship\r\n\r\nGuidelines:\r\n- Be friendly, professional, and encouraging\r\n- Provide accurate information about TechAcademy\r\n- If you don't know something, admit it and suggest contacting support\r\n- Keep responses concise but helpful\r\n- Always maintain a positive, educational tone\r\n- Suggest relevant courses or next steps when appropriate\r\n\r\nCurrent TechAcademy features:\r\n- 3-round assessment system (Resume, Communication, Coding)\r\n- Expert mentors with 10+ years experience\r\n- Industry certifications\r\n- Flexible learning options\r\n- Global opportunities\r\n- 95% success rate with 10,000+ students trained`;\r\n  }\r\n\r\n  // Send message to LLM\r\n  async sendMessage(userMessage: string): Promise<ChatbotResponse> {\r\n    try {\r\n      if (!this.config.apiKey) {\r\n        return {\r\n          message: \"Please configure your API key first. Go to settings to add your OpenAI API key.\",\r\n          error: \"API key not configured\"\r\n        };\r\n      }\r\n\r\n      // Add user message to history\r\n      this.addMessage(userMessage, 'user');\r\n\r\n      // Prepare messages for API\r\n      const messages = [\r\n        { role: 'system', content: this.getSystemPrompt() },\r\n        ...this.conversationHistory.slice(-10).map(msg => ({\r\n          role: msg.role,\r\n          content: msg.content\r\n        }))\r\n      ];\r\n\r\n      // Call OpenAI API\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.config.apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.model,\r\n          messages: messages,\r\n          temperature: this.config.temperature,\r\n          max_tokens: this.config.maxTokens\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error?.message || 'Failed to get response from AI');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const aiResponse = data.choices[0].message.content;\r\n\r\n      // Add AI response to history\r\n      this.addMessage(aiResponse, 'assistant');\r\n\r\n      // Generate suggestions based on the conversation\r\n      const suggestions = this.generateSuggestions(userMessage, aiResponse);\r\n\r\n      return {\r\n        message: aiResponse,\r\n        suggestions: suggestions\r\n      };\r\n\r\n    } catch (error: any) {\r\n      console.error('Chatbot error:', error);\r\n      \r\n      // Add error message to history\r\n      this.addMessage(`Error: ${error.message}`, 'assistant', 'error');\r\n\r\n      return {\r\n        message: \"I'm sorry, I'm having trouble connecting right now. Please try again later or contact our support team.\",\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  // Generate contextual suggestions\r\n  private generateSuggestions(userMessage: string, aiResponse: string): string[] {\r\n    const suggestions: string[] = [];\r\n    const message = userMessage.toLowerCase();\r\n    const response = aiResponse.toLowerCase();\r\n\r\n    // Course-related suggestions\r\n    if (message.includes('course') || message.includes('program') || message.includes('learn')) {\r\n      suggestions.push('Tell me about Digital Transformation program');\r\n      suggestions.push('What are the Cloud & DevOps course details?');\r\n      suggestions.push('How do I apply for Cyber Security program?');\r\n    }\r\n\r\n    // Assessment-related suggestions\r\n    if (message.includes('assessment') || message.includes('test') || message.includes('exam')) {\r\n      suggestions.push('How does the 3-round assessment work?');\r\n      suggestions.push('What should I prepare for the coding test?');\r\n      suggestions.push('Tell me about the resume evaluation process');\r\n    }\r\n\r\n    // Application-related suggestions\r\n    if (message.includes('apply') || message.includes('enroll') || message.includes('admission')) {\r\n      suggestions.push('What documents do I need to apply?');\r\n      suggestions.push('How long does the application process take?');\r\n      suggestions.push('What are the eligibility requirements?');\r\n    }\r\n\r\n    // General suggestions if no specific context\r\n    if (suggestions.length === 0) {\r\n      suggestions.push('What programs do you offer?');\r\n      suggestions.push('How do I start the assessment?');\r\n      suggestions.push('Tell me about your mentors');\r\n      suggestions.push('What are the course fees?');\r\n    }\r\n\r\n    return suggestions.slice(0, 3); // Return max 3 suggestions\r\n  }\r\n\r\n  // Get quick responses for common queries\r\n  getQuickResponses(): { label: string; message: string }[] {\r\n    return [\r\n      { label: 'Course Info', message: 'Tell me about your programs' },\r\n      { label: 'Assessment', message: 'How does the assessment work?' },\r\n      { label: 'Apply Now', message: 'How do I apply for a program?' },\r\n      { label: 'Fees', message: 'What are the course fees?' },\r\n      { label: 'Mentors', message: 'Tell me about your expert mentors' },\r\n      { label: 'Support', message: 'I need help with my application' }\r\n    ];\r\n  }\r\n\r\n  // Check if API key is configured\r\n  isConfigured(): boolean {\r\n    return !!this.config.apiKey;\r\n  }\r\n\r\n  // Get configuration\r\n  getConfig(): ChatbotConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  // Update configuration\r\n  updateConfig(newConfig: Partial<ChatbotConfig>) {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const chatbotService = new ChatbotService();\r\nexport default chatbotService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}