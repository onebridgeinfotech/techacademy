{"ast":null,"code":"// Chatbot Service for TechAcademy\n\nclass ChatbotService {\n  constructor() {\n    this.config = void 0;\n    this.conversationHistory = [];\n    this.config = {\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY || '',\n      model: 'gpt-3.5-turbo',\n      temperature: 0.7,\n      maxTokens: 500\n    };\n  }\n\n  // Update API key\n  updateApiKey(apiKey) {\n    this.config.apiKey = apiKey;\n  }\n\n  // Get conversation history\n  getConversationHistory() {\n    return this.conversationHistory;\n  }\n\n  // Clear conversation\n  clearConversation() {\n    this.conversationHistory = [];\n  }\n\n  // Add message to history\n  addMessage(content, role, type = 'text') {\n    const message = {\n      id: Date.now().toString(),\n      content,\n      role,\n      timestamp: new Date(),\n      type\n    };\n    this.conversationHistory.push(message);\n    return message;\n  }\n\n  // Generate system prompt for TechAcademy\n  getSystemPrompt() {\n    return `You are TechAcademy AI Assistant, a helpful chatbot for a technology education platform. Your role is to:\n\n1. **Course Information**: Provide details about our programs:\n   - Digital Transformation (6 months, Free)\n   - Cloud & DevOps (7 months, ₹15,999)\n   - Cyber Security (8 months, ₹18,999)\n   - Project Management (5 months, ₹12,999)\n\n2. **Admissions**: Help with application process, requirements, and enrollment\n3. **Technical Support**: Answer questions about courses, assessments, and learning paths\n4. **General Support**: Provide information about internships, placements, and mentorship\n\nGuidelines:\n- Be friendly, professional, and encouraging\n- Provide accurate information about TechAcademy\n- If you don't know something, admit it and suggest contacting support\n- Keep responses concise but helpful\n- Always maintain a positive, educational tone\n- Suggest relevant courses or next steps when appropriate\n\nCurrent TechAcademy features:\n- 3-round assessment system (Resume, Communication, Coding)\n- Expert mentors with 10+ years experience\n- Industry certifications\n- Flexible learning options\n- Global opportunities\n- 95% success rate with 10,000+ students trained`;\n  }\n\n  // Send message to LLM\n  async sendMessage(userMessage) {\n    try {\n      if (!this.config.apiKey) {\n        return {\n          message: \"Please configure your API key first. Go to settings to add your OpenAI API key.\",\n          error: \"API key not configured\"\n        };\n      }\n\n      // Add user message to history\n      this.addMessage(userMessage, 'user');\n\n      // Prepare messages for API\n      const messages = [{\n        role: 'system',\n        content: this.getSystemPrompt()\n      }, ...this.conversationHistory.slice(-10).map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }))];\n\n      // Call OpenAI API\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.config.apiKey}`\n        },\n        body: JSON.stringify({\n          model: this.config.model,\n          messages: messages,\n          temperature: this.config.temperature,\n          max_tokens: this.config.maxTokens\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        throw new Error(((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'Failed to get response from AI');\n      }\n      const data = await response.json();\n      const aiResponse = data.choices[0].message.content;\n\n      // Add AI response to history\n      this.addMessage(aiResponse, 'assistant');\n\n      // Generate suggestions based on the conversation\n      const suggestions = this.generateSuggestions(userMessage, aiResponse);\n      return {\n        message: aiResponse,\n        suggestions: suggestions\n      };\n    } catch (error) {\n      console.error('Chatbot error:', error);\n\n      // Add error message to history\n      this.addMessage(`Error: ${error.message}`, 'assistant', 'error');\n      return {\n        message: \"I'm sorry, I'm having trouble connecting right now. Please try again later or contact our support team.\",\n        error: error.message\n      };\n    }\n  }\n\n  // Generate contextual suggestions\n  generateSuggestions(userMessage, aiResponse) {\n    const suggestions = [];\n    const message = userMessage.toLowerCase();\n    const response = aiResponse.toLowerCase();\n\n    // Course-related suggestions\n    if (message.includes('course') || message.includes('program') || message.includes('learn')) {\n      suggestions.push('Tell me about Digital Transformation program');\n      suggestions.push('What are the Cloud & DevOps course details?');\n      suggestions.push('How do I apply for Cyber Security program?');\n    }\n\n    // Assessment-related suggestions\n    if (message.includes('assessment') || message.includes('test') || message.includes('exam')) {\n      suggestions.push('How does the 3-round assessment work?');\n      suggestions.push('What should I prepare for the coding test?');\n      suggestions.push('Tell me about the resume evaluation process');\n    }\n\n    // Application-related suggestions\n    if (message.includes('apply') || message.includes('enroll') || message.includes('admission')) {\n      suggestions.push('What documents do I need to apply?');\n      suggestions.push('How long does the application process take?');\n      suggestions.push('What are the eligibility requirements?');\n    }\n\n    // General suggestions if no specific context\n    if (suggestions.length === 0) {\n      suggestions.push('What programs do you offer?');\n      suggestions.push('How do I start the assessment?');\n      suggestions.push('Tell me about your mentors');\n      suggestions.push('What are the course fees?');\n    }\n    return suggestions.slice(0, 3); // Return max 3 suggestions\n  }\n\n  // Get quick responses for common queries\n  getQuickResponses() {\n    return [{\n      label: 'Course Info',\n      message: 'Tell me about your programs'\n    }, {\n      label: 'Assessment',\n      message: 'How does the assessment work?'\n    }, {\n      label: 'Apply Now',\n      message: 'How do I apply for a program?'\n    }, {\n      label: 'Fees',\n      message: 'What are the course fees?'\n    }, {\n      label: 'Mentors',\n      message: 'Tell me about your expert mentors'\n    }, {\n      label: 'Support',\n      message: 'I need help with my application'\n    }];\n  }\n\n  // Check if API key is configured\n  isConfigured() {\n    return !!this.config.apiKey;\n  }\n\n  // Get configuration\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n\n  // Update configuration\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n  }\n}\n\n// Export singleton instance\nexport const chatbotService = new ChatbotService();\nexport default chatbotService;","map":{"version":3,"names":["ChatbotService","constructor","config","conversationHistory","apiKey","process","env","REACT_APP_OPENAI_API_KEY","model","temperature","maxTokens","updateApiKey","getConversationHistory","clearConversation","addMessage","content","role","type","message","id","Date","now","toString","timestamp","push","getSystemPrompt","sendMessage","userMessage","error","messages","slice","map","msg","response","fetch","method","headers","body","JSON","stringify","max_tokens","ok","_errorData$error","errorData","json","Error","data","aiResponse","choices","suggestions","generateSuggestions","console","toLowerCase","includes","length","getQuickResponses","label","isConfigured","getConfig","updateConfig","newConfig","chatbotService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/chatbotService.ts"],"sourcesContent":["// Chatbot Service for TechAcademy\r\nexport interface ChatMessage {\r\n  id: string;\r\n  content: string;\r\n  role: 'user' | 'assistant';\r\n  timestamp: Date;\r\n  type?: 'text' | 'suggestion' | 'error';\r\n}\r\n\r\nexport interface ChatbotConfig {\r\n  apiKey: string;\r\n  model: string;\r\n  temperature: number;\r\n  maxTokens: number;\r\n}\r\n\r\nexport interface ChatbotResponse {\r\n  message: string;\r\n  suggestions?: string[];\r\n  error?: string;\r\n}\r\n\r\nclass ChatbotService {\r\n  private config: ChatbotConfig;\r\n  private conversationHistory: ChatMessage[] = [];\r\n\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY || '',\r\n      model: 'gpt-3.5-turbo',\r\n      temperature: 0.7,\r\n      maxTokens: 500\r\n    };\r\n  }\r\n\r\n  // Update API key\r\n  updateApiKey(apiKey: string) {\r\n    this.config.apiKey = apiKey;\r\n  }\r\n\r\n  // Get conversation history\r\n  getConversationHistory(): ChatMessage[] {\r\n    return this.conversationHistory;\r\n  }\r\n\r\n  // Clear conversation\r\n  clearConversation() {\r\n    this.conversationHistory = [];\r\n  }\r\n\r\n  // Add message to history\r\n  private addMessage(content: string, role: 'user' | 'assistant', type: 'text' | 'suggestion' | 'error' = 'text'): ChatMessage {\r\n    const message: ChatMessage = {\r\n      id: Date.now().toString(),\r\n      content,\r\n      role,\r\n      timestamp: new Date(),\r\n      type\r\n    };\r\n    this.conversationHistory.push(message);\r\n    return message;\r\n  }\r\n\r\n  // Generate system prompt for TechAcademy\r\n  private getSystemPrompt(): string {\r\n    return `You are TechAcademy AI Assistant, a helpful chatbot for a technology education platform. Your role is to:\r\n\r\n1. **Course Information**: Provide details about our programs:\r\n   - Digital Transformation (6 months, Free)\r\n   - Cloud & DevOps (7 months, ₹15,999)\r\n   - Cyber Security (8 months, ₹18,999)\r\n   - Project Management (5 months, ₹12,999)\r\n\r\n2. **Admissions**: Help with application process, requirements, and enrollment\r\n3. **Technical Support**: Answer questions about courses, assessments, and learning paths\r\n4. **General Support**: Provide information about internships, placements, and mentorship\r\n\r\nGuidelines:\r\n- Be friendly, professional, and encouraging\r\n- Provide accurate information about TechAcademy\r\n- If you don't know something, admit it and suggest contacting support\r\n- Keep responses concise but helpful\r\n- Always maintain a positive, educational tone\r\n- Suggest relevant courses or next steps when appropriate\r\n\r\nCurrent TechAcademy features:\r\n- 3-round assessment system (Resume, Communication, Coding)\r\n- Expert mentors with 10+ years experience\r\n- Industry certifications\r\n- Flexible learning options\r\n- Global opportunities\r\n- 95% success rate with 10,000+ students trained`;\r\n  }\r\n\r\n  // Send message to LLM\r\n  async sendMessage(userMessage: string): Promise<ChatbotResponse> {\r\n    try {\r\n      if (!this.config.apiKey) {\r\n        return {\r\n          message: \"Please configure your API key first. Go to settings to add your OpenAI API key.\",\r\n          error: \"API key not configured\"\r\n        };\r\n      }\r\n\r\n      // Add user message to history\r\n      this.addMessage(userMessage, 'user');\r\n\r\n      // Prepare messages for API\r\n      const messages = [\r\n        { role: 'system', content: this.getSystemPrompt() },\r\n        ...this.conversationHistory.slice(-10).map(msg => ({\r\n          role: msg.role,\r\n          content: msg.content\r\n        }))\r\n      ];\r\n\r\n      // Call OpenAI API\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${this.config.apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.config.model,\r\n          messages: messages,\r\n          temperature: this.config.temperature,\r\n          max_tokens: this.config.maxTokens\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error?.message || 'Failed to get response from AI');\r\n      }\r\n\r\n      const data = await response.json();\r\n      const aiResponse = data.choices[0].message.content;\r\n\r\n      // Add AI response to history\r\n      this.addMessage(aiResponse, 'assistant');\r\n\r\n      // Generate suggestions based on the conversation\r\n      const suggestions = this.generateSuggestions(userMessage, aiResponse);\r\n\r\n      return {\r\n        message: aiResponse,\r\n        suggestions: suggestions\r\n      };\r\n\r\n    } catch (error: any) {\r\n      console.error('Chatbot error:', error);\r\n      \r\n      // Add error message to history\r\n      this.addMessage(`Error: ${error.message}`, 'assistant', 'error');\r\n\r\n      return {\r\n        message: \"I'm sorry, I'm having trouble connecting right now. Please try again later or contact our support team.\",\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  // Generate contextual suggestions\r\n  private generateSuggestions(userMessage: string, aiResponse: string): string[] {\r\n    const suggestions: string[] = [];\r\n    const message = userMessage.toLowerCase();\r\n    const response = aiResponse.toLowerCase();\r\n\r\n    // Course-related suggestions\r\n    if (message.includes('course') || message.includes('program') || message.includes('learn')) {\r\n      suggestions.push('Tell me about Digital Transformation program');\r\n      suggestions.push('What are the Cloud & DevOps course details?');\r\n      suggestions.push('How do I apply for Cyber Security program?');\r\n    }\r\n\r\n    // Assessment-related suggestions\r\n    if (message.includes('assessment') || message.includes('test') || message.includes('exam')) {\r\n      suggestions.push('How does the 3-round assessment work?');\r\n      suggestions.push('What should I prepare for the coding test?');\r\n      suggestions.push('Tell me about the resume evaluation process');\r\n    }\r\n\r\n    // Application-related suggestions\r\n    if (message.includes('apply') || message.includes('enroll') || message.includes('admission')) {\r\n      suggestions.push('What documents do I need to apply?');\r\n      suggestions.push('How long does the application process take?');\r\n      suggestions.push('What are the eligibility requirements?');\r\n    }\r\n\r\n    // General suggestions if no specific context\r\n    if (suggestions.length === 0) {\r\n      suggestions.push('What programs do you offer?');\r\n      suggestions.push('How do I start the assessment?');\r\n      suggestions.push('Tell me about your mentors');\r\n      suggestions.push('What are the course fees?');\r\n    }\r\n\r\n    return suggestions.slice(0, 3); // Return max 3 suggestions\r\n  }\r\n\r\n  // Get quick responses for common queries\r\n  getQuickResponses(): { label: string; message: string }[] {\r\n    return [\r\n      { label: 'Course Info', message: 'Tell me about your programs' },\r\n      { label: 'Assessment', message: 'How does the assessment work?' },\r\n      { label: 'Apply Now', message: 'How do I apply for a program?' },\r\n      { label: 'Fees', message: 'What are the course fees?' },\r\n      { label: 'Mentors', message: 'Tell me about your expert mentors' },\r\n      { label: 'Support', message: 'I need help with my application' }\r\n    ];\r\n  }\r\n\r\n  // Check if API key is configured\r\n  isConfigured(): boolean {\r\n    return !!this.config.apiKey;\r\n  }\r\n\r\n  // Get configuration\r\n  getConfig(): ChatbotConfig {\r\n    return { ...this.config };\r\n  }\r\n\r\n  // Update configuration\r\n  updateConfig(newConfig: Partial<ChatbotConfig>) {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const chatbotService = new ChatbotService();\r\nexport default chatbotService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}