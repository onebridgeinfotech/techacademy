{"ast":null,"code":"// Authentication Service for Assessment System\n\nclass AuthService {\n  constructor() {\n    this.currentUser = null;\n    this.token = null;\n    // Load user from localStorage on initialization\n    this.loadUserFromStorage();\n  }\n  async signup(data) {\n    try {\n      // Validate input\n      if (!data.name || !data.email || !data.password) {\n        return {\n          success: false,\n          error: 'All required fields must be filled'\n        };\n      }\n      if (!this.isValidEmail(data.email)) {\n        return {\n          success: false,\n          error: 'Invalid email format'\n        };\n      }\n      if (data.password.length < 8) {\n        return {\n          success: false,\n          error: 'Password must be at least 8 characters long'\n        };\n      }\n\n      // Check if user already exists\n      const existingUser = this.getUserByEmail(data.email);\n      if (existingUser) {\n        return {\n          success: false,\n          error: 'User with this email already exists'\n        };\n      }\n\n      // Create new user\n      const newUser = {\n        id: this.generateUserId(),\n        email: data.email,\n        name: data.name,\n        phone: data.phone,\n        location: data.location,\n        profileComplete: false,\n        assessmentCompleted: false,\n        createdAt: new Date().toISOString(),\n        lastLoginAt: new Date().toISOString()\n      };\n\n      // Save user to localStorage (in production, this would be an API call)\n      this.saveUser(newUser);\n      this.setCurrentUser(newUser);\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to create account'\n      };\n    }\n  }\n  async login(credentials) {\n    try {\n      const user = this.getUserByEmail(credentials.email);\n      if (!user) {\n        return {\n          success: false,\n          error: 'User not found'\n        };\n      }\n\n      // In a real app, you'd verify the password hash\n      // For now, we'll just check if the user exists\n      this.setCurrentUser(user);\n      this.updateLastLogin(user.id);\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  }\n  async logout() {\n    this.currentUser = null;\n    this.token = null;\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('authToken');\n  }\n  async updateProfile(profileData) {\n    try {\n      if (!this.currentUser) {\n        return {\n          success: false,\n          error: 'User not authenticated'\n        };\n      }\n\n      // Update user profile\n      const updatedUser = {\n        ...this.currentUser,\n        name: profileData.name,\n        email: profileData.email,\n        phone: profileData.phone,\n        location: profileData.location,\n        profileComplete: this.isProfileComplete(profileData)\n      };\n      this.saveUser(updatedUser);\n      this.setCurrentUser(updatedUser);\n      return {\n        success: true,\n        user: updatedUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to update profile'\n      };\n    }\n  }\n  async uploadResume(resumeFile) {\n    try {\n      if (!this.currentUser) {\n        return {\n          success: false,\n          error: 'User not authenticated'\n        };\n      }\n\n      // Validate file\n      if (!this.isValidResumeFile(resumeFile)) {\n        return {\n          success: false,\n          error: 'Invalid file format. Please upload PDF, DOC, or DOCX files.'\n        };\n      }\n      if (resumeFile.size > 10 * 1024 * 1024) {\n        // 10MB limit\n        return {\n          success: false,\n          error: 'File size too large. Maximum size is 10MB.'\n        };\n      }\n\n      // In a real app, you'd upload to a cloud storage service\n      // For now, we'll just mark the profile as complete\n      const updatedUser = {\n        ...this.currentUser,\n        profileComplete: true\n      };\n      this.saveUser(updatedUser);\n      this.setCurrentUser(updatedUser);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Failed to upload resume'\n      };\n    }\n  }\n  canStartAssessment() {\n    var _this$currentUser, _this$currentUser2;\n    return ((_this$currentUser = this.currentUser) === null || _this$currentUser === void 0 ? void 0 : _this$currentUser.profileComplete) === true && !((_this$currentUser2 = this.currentUser) !== null && _this$currentUser2 !== void 0 && _this$currentUser2.assessmentCompleted);\n  }\n  hasCompletedAssessment() {\n    var _this$currentUser3;\n    return ((_this$currentUser3 = this.currentUser) === null || _this$currentUser3 === void 0 ? void 0 : _this$currentUser3.assessmentCompleted) === true;\n  }\n  getCurrentUser() {\n    return this.currentUser;\n  }\n  isAuthenticated() {\n    return this.currentUser !== null;\n  }\n  setCurrentUser(user) {\n    this.currentUser = user;\n    localStorage.setItem('currentUser', JSON.stringify(user));\n  }\n  loadUserFromStorage() {\n    try {\n      const storedUser = localStorage.getItem('currentUser');\n      if (storedUser) {\n        this.currentUser = JSON.parse(storedUser);\n      }\n    } catch (error) {\n      console.error('Error loading user from storage:', error);\n    }\n  }\n  saveUser(user) {\n    try {\n      const users = this.getAllUsers();\n      const existingIndex = users.findIndex(u => u.id === user.id);\n      if (existingIndex >= 0) {\n        users[existingIndex] = user;\n      } else {\n        users.push(user);\n      }\n      localStorage.setItem('users', JSON.stringify(users));\n    } catch (error) {\n      console.error('Error saving user:', error);\n    }\n  }\n  getAllUsers() {\n    try {\n      const stored = localStorage.getItem('users');\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading users:', error);\n      return [];\n    }\n  }\n  getUserByEmail(email) {\n    const users = this.getAllUsers();\n    return users.find(user => user.email === email) || null;\n  }\n  updateLastLogin(userId) {\n    const users = this.getAllUsers();\n    const userIndex = users.findIndex(u => u.id === userId);\n    if (userIndex >= 0) {\n      users[userIndex].lastLoginAt = new Date().toISOString();\n      localStorage.setItem('users', JSON.stringify(users));\n    }\n  }\n  generateUserId() {\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  isValidResumeFile(file) {\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    return allowedTypes.includes(file.type);\n  }\n  isProfileComplete(profileData) {\n    return !!(profileData.name && profileData.email && profileData.phone && profileData.location);\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["AuthService","constructor","currentUser","token","loadUserFromStorage","signup","data","name","email","password","success","error","isValidEmail","length","existingUser","getUserByEmail","newUser","id","generateUserId","phone","location","profileComplete","assessmentCompleted","createdAt","Date","toISOString","lastLoginAt","saveUser","setCurrentUser","user","login","credentials","updateLastLogin","logout","localStorage","removeItem","updateProfile","profileData","updatedUser","isProfileComplete","uploadResume","resumeFile","isValidResumeFile","size","canStartAssessment","_this$currentUser","_this$currentUser2","hasCompletedAssessment","_this$currentUser3","getCurrentUser","isAuthenticated","setItem","JSON","stringify","storedUser","getItem","parse","console","users","getAllUsers","existingIndex","findIndex","u","push","stored","find","userId","userIndex","now","Math","random","toString","substr","emailRegex","test","file","allowedTypes","includes","type","authService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/authService.ts"],"sourcesContent":["// Authentication Service for Assessment System\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  phone?: string;\r\n  location?: string;\r\n  profileComplete: boolean;\r\n  assessmentCompleted: boolean;\r\n  assessmentScore?: number;\r\n  createdAt: string;\r\n  lastLoginAt: string;\r\n}\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface SignupData {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  phone?: string;\r\n  location?: string;\r\n}\r\n\r\nexport interface ProfileData {\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  location?: string;\r\n  resume?: File;\r\n  skills?: string[];\r\n  experience?: string[];\r\n  education?: string[];\r\n  projects?: string[];\r\n  certifications?: string[];\r\n}\r\n\r\nclass AuthService {\r\n  private currentUser: User | null = null;\r\n  private token: string | null = null;\r\n\r\n  constructor() {\r\n    // Load user from localStorage on initialization\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  async signup(data: SignupData): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      // Validate input\r\n      if (!data.name || !data.email || !data.password) {\r\n        return { success: false, error: 'All required fields must be filled' };\r\n      }\r\n\r\n      if (!this.isValidEmail(data.email)) {\r\n        return { success: false, error: 'Invalid email format' };\r\n      }\r\n\r\n      if (data.password.length < 8) {\r\n        return { success: false, error: 'Password must be at least 8 characters long' };\r\n      }\r\n\r\n      // Check if user already exists\r\n      const existingUser = this.getUserByEmail(data.email);\r\n      if (existingUser) {\r\n        return { success: false, error: 'User with this email already exists' };\r\n      }\r\n\r\n      // Create new user\r\n      const newUser: User = {\r\n        id: this.generateUserId(),\r\n        email: data.email,\r\n        name: data.name,\r\n        phone: data.phone,\r\n        location: data.location,\r\n        profileComplete: false,\r\n        assessmentCompleted: false,\r\n        createdAt: new Date().toISOString(),\r\n        lastLoginAt: new Date().toISOString()\r\n      };\r\n\r\n      // Save user to localStorage (in production, this would be an API call)\r\n      this.saveUser(newUser);\r\n      this.setCurrentUser(newUser);\r\n\r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      return { success: false, error: 'Failed to create account' };\r\n    }\r\n  }\r\n\r\n  async login(credentials: LoginCredentials): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      const user = this.getUserByEmail(credentials.email);\r\n      \r\n      if (!user) {\r\n        return { success: false, error: 'User not found' };\r\n      }\r\n\r\n      // In a real app, you'd verify the password hash\r\n      // For now, we'll just check if the user exists\r\n      this.setCurrentUser(user);\r\n      this.updateLastLogin(user.id);\r\n\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    this.currentUser = null;\r\n    this.token = null;\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('authToken');\r\n  }\r\n\r\n  async updateProfile(profileData: ProfileData): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      if (!this.currentUser) {\r\n        return { success: false, error: 'User not authenticated' };\r\n      }\r\n\r\n      // Update user profile\r\n      const updatedUser: User = {\r\n        ...this.currentUser,\r\n        name: profileData.name,\r\n        email: profileData.email,\r\n        phone: profileData.phone,\r\n        location: profileData.location,\r\n        profileComplete: this.isProfileComplete(profileData)\r\n      };\r\n\r\n      this.saveUser(updatedUser);\r\n      this.setCurrentUser(updatedUser);\r\n\r\n      return { success: true, user: updatedUser };\r\n    } catch (error) {\r\n      return { success: false, error: 'Failed to update profile' };\r\n    }\r\n  }\r\n\r\n  async uploadResume(resumeFile: File): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      if (!this.currentUser) {\r\n        return { success: false, error: 'User not authenticated' };\r\n      }\r\n\r\n      // Validate file\r\n      if (!this.isValidResumeFile(resumeFile)) {\r\n        return { success: false, error: 'Invalid file format. Please upload PDF, DOC, or DOCX files.' };\r\n      }\r\n\r\n      if (resumeFile.size > 10 * 1024 * 1024) { // 10MB limit\r\n        return { success: false, error: 'File size too large. Maximum size is 10MB.' };\r\n      }\r\n\r\n      // In a real app, you'd upload to a cloud storage service\r\n      // For now, we'll just mark the profile as complete\r\n      const updatedUser: User = {\r\n        ...this.currentUser,\r\n        profileComplete: true\r\n      };\r\n\r\n      this.saveUser(updatedUser);\r\n      this.setCurrentUser(updatedUser);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: 'Failed to upload resume' };\r\n    }\r\n  }\r\n\r\n  canStartAssessment(): boolean {\r\n    return this.currentUser?.profileComplete === true && !this.currentUser?.assessmentCompleted;\r\n  }\r\n\r\n  hasCompletedAssessment(): boolean {\r\n    return this.currentUser?.assessmentCompleted === true;\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUser;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.currentUser !== null;\r\n  }\r\n\r\n  private setCurrentUser(user: User): void {\r\n    this.currentUser = user;\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n  }\r\n\r\n  private loadUserFromStorage(): void {\r\n    try {\r\n      const storedUser = localStorage.getItem('currentUser');\r\n      if (storedUser) {\r\n        this.currentUser = JSON.parse(storedUser);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading user from storage:', error);\r\n    }\r\n  }\r\n\r\n  private saveUser(user: User): void {\r\n    try {\r\n      const users = this.getAllUsers();\r\n      const existingIndex = users.findIndex(u => u.id === user.id);\r\n      \r\n      if (existingIndex >= 0) {\r\n        users[existingIndex] = user;\r\n      } else {\r\n        users.push(user);\r\n      }\r\n      \r\n      localStorage.setItem('users', JSON.stringify(users));\r\n    } catch (error) {\r\n      console.error('Error saving user:', error);\r\n    }\r\n  }\r\n\r\n  private getAllUsers(): User[] {\r\n    try {\r\n      const stored = localStorage.getItem('users');\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Error loading users:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getUserByEmail(email: string): User | null {\r\n    const users = this.getAllUsers();\r\n    return users.find(user => user.email === email) || null;\r\n  }\r\n\r\n  private updateLastLogin(userId: string): void {\r\n    const users = this.getAllUsers();\r\n    const userIndex = users.findIndex(u => u.id === userId);\r\n    \r\n    if (userIndex >= 0) {\r\n      users[userIndex].lastLoginAt = new Date().toISOString();\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n    }\r\n  }\r\n\r\n  private generateUserId(): string {\r\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  private isValidResumeFile(file: File): boolean {\r\n    const allowedTypes = [\r\n      'application/pdf',\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    return allowedTypes.includes(file.type);\r\n  }\r\n\r\n  private isProfileComplete(profileData: ProfileData): boolean {\r\n    return !!(\r\n      profileData.name &&\r\n      profileData.email &&\r\n      profileData.phone &&\r\n      profileData.location\r\n    );\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}