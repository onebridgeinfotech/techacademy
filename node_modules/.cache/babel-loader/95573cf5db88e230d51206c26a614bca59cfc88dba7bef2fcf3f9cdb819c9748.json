{"ast":null,"code":"// Enhanced ChatGPT Assessment Service\n// Comprehensive assessment system with all 3 phases\n\n// Mock data for demonstration - in production, integrate with OpenAI API\nconst mockObjectiveQuestions = [{\n  id: 'q1',\n  question: 'What is the time complexity of binary search?',\n  options: ['O(n)', 'O(log n)', 'O(nÂ²)', 'O(1)'],\n  correctAnswer: 'O(log n)',\n  topic: 'Data Structures',\n  difficulty: 'easy',\n  timeLimit: 60\n}, {\n  id: 'q2',\n  question: 'Which of the following is NOT a valid Python data type?',\n  options: ['list', 'tuple', 'array', 'dictionary'],\n  correctAnswer: 'array',\n  topic: 'Python',\n  difficulty: 'easy',\n  timeLimit: 60\n}, {\n  id: 'q3',\n  question: 'What does SQL stand for?',\n  options: ['Structured Query Language', 'Simple Query Language', 'Standard Query Language', 'System Query Language'],\n  correctAnswer: 'Structured Query Language',\n  topic: 'Database',\n  difficulty: 'easy',\n  timeLimit: 60\n}, {\n  id: 'q4',\n  question: 'Which design pattern ensures only one instance of a class exists?',\n  options: ['Factory', 'Singleton', 'Observer', 'Builder'],\n  correctAnswer: 'Singleton',\n  topic: 'OOP',\n  difficulty: 'medium',\n  timeLimit: 60\n}, {\n  id: 'q5',\n  question: 'What is the purpose of a foreign key in a database?',\n  options: ['To ensure data integrity', 'To improve query performance', 'To store encrypted data', 'To create backups'],\n  correctAnswer: 'To ensure data integrity',\n  topic: 'Database',\n  difficulty: 'medium',\n  timeLimit: 60\n}];\nconst mockCommunicationTest = {\n  written: {\n    scenario: \"Write a professional email to your mentor requesting a 2-day extension on your current project deadline. The project is a web application and you need more time to implement the authentication feature properly.\",\n    sampleAnswer: \"Subject: Request for Project Deadline Extension\\n\\nDear [Mentor Name],\\n\\nI hope this email finds you well. I am writing to request a 2-day extension on the web application project deadline.\\n\\nI have made significant progress on the core functionality, but I need additional time to properly implement the authentication feature. This is a critical component that requires careful attention to security best practices.\\n\\nI am confident that with the extra time, I can deliver a more robust and secure solution. I will provide regular updates on my progress.\\n\\nThank you for your understanding.\\n\\nBest regards,\\n[Your Name]\",\n    evaluationRubric: ['Professional tone', 'Clear request', 'Justification provided', 'Proper email format', 'Grammar and spelling']\n  },\n  spoken: {\n    prompt: \"Introduce yourself and explain your learning journey in technology. Describe your favorite project and the technologies you used. Speak for 3-5 minutes.\",\n    evaluationRubric: ['Clarity of speech', 'Confidence level', 'Technical vocabulary', 'Structure and flow', 'Engagement'],\n    timeLimit: 300\n  }\n};\nconst mockCodingProblems = [{\n  id: 'cp1',\n  problem: 'Write a function to find the factorial of a number using recursion.',\n  inputExample: 'factorial(5)',\n  expectedOutput: '120',\n  difficulty: 'easy',\n  language: 'python',\n  evaluationCriteria: ['Correctness', 'Code efficiency', 'Readability', 'Edge cases'],\n  timeLimit: 900\n}, {\n  id: 'cp2',\n  problem: 'Implement a function to check if a string is a palindrome.',\n  inputExample: 'isPalindrome(\"racecar\")',\n  expectedOutput: 'True',\n  difficulty: 'easy',\n  language: 'python',\n  evaluationCriteria: ['Correctness', 'Code efficiency', 'Readability', 'Edge cases'],\n  timeLimit: 900\n}, {\n  id: 'cp3',\n  problem: 'Create a class to represent a bank account with deposit, withdraw, and balance methods.',\n  inputExample: 'account = BankAccount(1000)\\naccount.deposit(500)\\naccount.withdraw(200)',\n  expectedOutput: 'Balance: 1300',\n  difficulty: 'medium',\n  language: 'python',\n  evaluationCriteria: ['Class design', 'Method implementation', 'Error handling', 'Code organization'],\n  timeLimit: 1200\n}];\nclass AssessmentService {\n  // Generate 30 adaptive objective questions based on resume\n  async generateObjectiveQuestions(resumeData) {\n    // In production, use OpenAI API to generate questions based on resume\n    // For now, return mock questions with some adaptation\n    const questions = [...mockObjectiveQuestions];\n\n    // Add more questions to reach 30\n    for (let i = 6; i <= 30; i++) {\n      questions.push({\n        id: `q${i}`,\n        question: `Sample question ${i}: What is the output of this code?`,\n        options: ['Option A', 'Option B', 'Option C', 'Option D'],\n        correctAnswer: 'Option B',\n        topic: 'Programming',\n        difficulty: i % 3 === 0 ? 'hard' : i % 2 === 0 ? 'medium' : 'easy',\n        timeLimit: 60\n      });\n    }\n    return questions;\n  }\n\n  // Generate communication test based on resume\n  async generateCommunicationTest(resumeData) {\n    // In production, customize based on resume\n    return mockCommunicationTest;\n  }\n\n  // Generate coding problems based on selected language and resume\n  async generateCodingProblems(language, resumeData) {\n    // In production, generate problems based on language and resume\n    return mockCodingProblems.map(problem => ({\n      ...problem,\n      language: language\n    }));\n  }\n\n  // Evaluate objective test answers\n  async evaluateObjectiveTest(questions, answers) {\n    let score = 0;\n    questions.forEach(question => {\n      if (answers[question.id] === question.correctAnswer) {\n        score++;\n      }\n    });\n    return score;\n  }\n\n  // Evaluate communication test\n  async evaluateCommunicationTest(writtenResponse, audioBlob, test) {\n    // In production, use AI to evaluate responses\n    // For now, return mock scores\n    const writtenScore = Math.min(95, 70 + Math.random() * 25);\n    const spokenScore = Math.min(95, 70 + Math.random() * 25);\n    return {\n      written: Math.round(writtenScore),\n      spoken: Math.round(spokenScore)\n    };\n  }\n\n  // Evaluate coding test\n  async evaluateCodingTest(problems, solutions) {\n    // In production, use AI to evaluate code\n    // For now, return mock score\n    return Math.min(100, 80 + Math.random() * 20);\n  }\n\n  // Generate final assessment result\n  async generateFinalResult(data) {\n    // In production, generate comprehensive result\n    return {\n      candidateId: data.candidateId,\n      name: data.name,\n      email: data.email,\n      resumeHighlights: data.resumeHighlights || [],\n      objectiveTest: data.objectiveTest,\n      communicationTest: data.communicationTest,\n      codingTest: data.codingTest,\n      proctoringViolations: data.proctoringViolations || 0,\n      finalStatus: data.finalStatus,\n      eligibleForInterview: data.eligibleForInterview,\n      sponsorshipApproved: data.sponsorshipApproved,\n      assessmentDate: new Date().toISOString()\n    };\n  }\n\n  // Send result email\n  async sendResultEmail(result) {\n    // In production, send actual email\n    console.log('Sending result email:', result);\n    if (result.finalStatus === 'Passed') {\n      // Send congratulatory email\n      console.log('Sending congratulatory email to:', result.email);\n    } else {\n      // Send failure email with feedback\n      console.log('Sending failure email to:', result.email);\n    }\n  }\n\n  // Generate questions for specific round\n  async generateQuestions(round, resumeData) {\n    // In production, generate questions based on round and resume\n    return [];\n  }\n\n  // Evaluate answers for specific round\n  async evaluateAnswers(round, questions, answers) {\n    // In production, evaluate answers using AI\n    return {\n      score: 85,\n      feedback: 'Good performance'\n    };\n  }\n\n  // Check if candidate can start assessment\n  canStartAssessment() {\n    // In production, check database for eligibility\n    return true;\n  }\n\n  // Get assessment data\n  async getAssessmentData(candidateId) {\n    // In production, fetch from database\n    return null;\n  }\n\n  // Save assessment data\n  async saveAssessmentData(data) {\n    // In production, save to database\n    console.log('Saving assessment data:', data);\n  }\n\n  // Generate feedback report\n  async generateFeedbackReport(result) {\n    const feedback = `\nAssessment Feedback Report\n========================\n\nCandidate: ${result.name}\nAssessment Date: ${result.assessmentDate}\nFinal Status: ${result.finalStatus}\n\nObjective Test: ${result.objectiveTest.score}/30 (${result.objectiveTest.pass ? 'Passed' : 'Failed'})\nCommunication Test: Written ${result.communicationTest.written}%, Spoken ${result.communicationTest.spoken}% (${result.communicationTest.pass ? 'Passed' : 'Failed'})\nCoding Test: ${result.codingTest.score}% (${result.codingTest.pass ? 'Passed' : 'Failed'})\n\nStrengths:\n- Strong technical foundation\n- Good problem-solving skills\n- Effective communication\n\nAreas for Improvement:\n- Practice more coding problems\n- Improve time management\n- Enhance technical vocabulary\n\nRecommendations:\n- Complete online coding challenges\n- Practice system design concepts\n- Improve communication skills\n\nNext Steps:\n${result.finalStatus === 'Passed' ? '- Eligible for final interview\\n- Prepare for technical discussion\\n- Review company culture' : '- Retake assessment after 30 days\\n- Focus on weak areas\\n- Practice regularly'}\n    `;\n    return feedback;\n  }\n}\nexport const assessmentService = new AssessmentService();","map":{"version":3,"names":["mockObjectiveQuestions","id","question","options","correctAnswer","topic","difficulty","timeLimit","mockCommunicationTest","written","scenario","sampleAnswer","evaluationRubric","spoken","prompt","mockCodingProblems","problem","inputExample","expectedOutput","language","evaluationCriteria","AssessmentService","generateObjectiveQuestions","resumeData","questions","i","push","generateCommunicationTest","generateCodingProblems","map","evaluateObjectiveTest","answers","score","forEach","evaluateCommunicationTest","writtenResponse","audioBlob","test","writtenScore","Math","min","random","spokenScore","round","evaluateCodingTest","problems","solutions","generateFinalResult","data","candidateId","name","email","resumeHighlights","objectiveTest","communicationTest","codingTest","proctoringViolations","finalStatus","eligibleForInterview","sponsorshipApproved","assessmentDate","Date","toISOString","sendResultEmail","result","console","log","generateQuestions","evaluateAnswers","feedback","canStartAssessment","getAssessmentData","saveAssessmentData","generateFeedbackReport","pass","assessmentService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/assessmentService.ts"],"sourcesContent":["// Enhanced ChatGPT Assessment Service\n// Comprehensive assessment system with all 3 phases\n\nexport interface AssessmentData {\n  candidateId: string;\n  candidateName: string;\n  candidateEmail: string;\n  resumeText?: string;\n  currentRound: number;\n  totalRounds: number;\n  scores: {\n    round1?: number;\n    round2?: number;\n    round3?: number;\n  };\n  feedback: {\n    round1?: string;\n    round2?: string;\n    round3?: string;\n  };\n  status: 'in_progress' | 'completed' | 'failed';\n  strengths: string[];\n  weaknesses: string[];\n}\n\nexport interface ResumeData {\n  skills: string[];\n  projects: string[];\n  certifications: string[];\n  experience: string[];\n  education: string[];\n  gpa?: number;\n}\n\nexport interface ObjectiveQuestion {\n  id: string;\n  question: string;\n  options: string[];\n  correctAnswer: string;\n  topic: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  timeLimit: number;\n}\n\nexport interface CommunicationTest {\n  written: {\n    scenario: string;\n    sampleAnswer: string;\n    evaluationRubric: string[];\n  };\n  spoken: {\n    prompt: string;\n    evaluationRubric: string[];\n    timeLimit: number;\n  };\n}\n\nexport interface CodingProblem {\n  id: string;\n  problem: string;\n  inputExample: string;\n  expectedOutput: string;\n  difficulty: 'easy' | 'medium' | 'hard';\n  language: string;\n  evaluationCriteria: string[];\n  timeLimit: number;\n}\n\nexport interface AssessmentResult {\n  candidateId: string;\n  name: string;\n  email: string;\n  resumeHighlights: string[];\n  objectiveTest: {\n    score: number;\n    pass: boolean;\n    timeTaken: string;\n    questionsAnswered: number;\n  };\n  communicationTest: {\n    written: number;\n    spoken: number;\n    pass: boolean;\n  };\n  codingTest: {\n    score: number;\n    language: string;\n    pass: boolean;\n  };\n  proctoringViolations: number;\n  finalStatus: 'Passed' | 'Failed';\n  eligibleForInterview: boolean;\n  sponsorshipApproved: boolean;\n  assessmentDate: string;\n}\n\n// Mock data for demonstration - in production, integrate with OpenAI API\nconst mockObjectiveQuestions: ObjectiveQuestion[] = [\n  {\n    id: 'q1',\n    question: 'What is the time complexity of binary search?',\n    options: ['O(n)', 'O(log n)', 'O(nÂ²)', 'O(1)'],\n    correctAnswer: 'O(log n)',\n    topic: 'Data Structures',\n    difficulty: 'easy',\n    timeLimit: 60\n  },\n  {\n    id: 'q2',\n    question: 'Which of the following is NOT a valid Python data type?',\n    options: ['list', 'tuple', 'array', 'dictionary'],\n    correctAnswer: 'array',\n    topic: 'Python',\n    difficulty: 'easy',\n    timeLimit: 60\n  },\n  {\n    id: 'q3',\n    question: 'What does SQL stand for?',\n    options: ['Structured Query Language', 'Simple Query Language', 'Standard Query Language', 'System Query Language'],\n    correctAnswer: 'Structured Query Language',\n    topic: 'Database',\n    difficulty: 'easy',\n    timeLimit: 60\n  },\n  {\n    id: 'q4',\n    question: 'Which design pattern ensures only one instance of a class exists?',\n    options: ['Factory', 'Singleton', 'Observer', 'Builder'],\n    correctAnswer: 'Singleton',\n    topic: 'OOP',\n    difficulty: 'medium',\n    timeLimit: 60\n  },\n  {\n    id: 'q5',\n    question: 'What is the purpose of a foreign key in a database?',\n    options: ['To ensure data integrity', 'To improve query performance', 'To store encrypted data', 'To create backups'],\n    correctAnswer: 'To ensure data integrity',\n    topic: 'Database',\n    difficulty: 'medium',\n    timeLimit: 60\n  }\n];\n\nconst mockCommunicationTest: CommunicationTest = {\n  written: {\n    scenario: \"Write a professional email to your mentor requesting a 2-day extension on your current project deadline. The project is a web application and you need more time to implement the authentication feature properly.\",\n    sampleAnswer: \"Subject: Request for Project Deadline Extension\\n\\nDear [Mentor Name],\\n\\nI hope this email finds you well. I am writing to request a 2-day extension on the web application project deadline.\\n\\nI have made significant progress on the core functionality, but I need additional time to properly implement the authentication feature. This is a critical component that requires careful attention to security best practices.\\n\\nI am confident that with the extra time, I can deliver a more robust and secure solution. I will provide regular updates on my progress.\\n\\nThank you for your understanding.\\n\\nBest regards,\\n[Your Name]\",\n    evaluationRubric: ['Professional tone', 'Clear request', 'Justification provided', 'Proper email format', 'Grammar and spelling']\n  },\n  spoken: {\n    prompt: \"Introduce yourself and explain your learning journey in technology. Describe your favorite project and the technologies you used. Speak for 3-5 minutes.\",\n    evaluationRubric: ['Clarity of speech', 'Confidence level', 'Technical vocabulary', 'Structure and flow', 'Engagement'],\n    timeLimit: 300\n  }\n};\n\nconst mockCodingProblems: CodingProblem[] = [\n  {\n    id: 'cp1',\n    problem: 'Write a function to find the factorial of a number using recursion.',\n    inputExample: 'factorial(5)',\n    expectedOutput: '120',\n    difficulty: 'easy',\n    language: 'python',\n    evaluationCriteria: ['Correctness', 'Code efficiency', 'Readability', 'Edge cases'],\n    timeLimit: 900\n  },\n  {\n    id: 'cp2',\n    problem: 'Implement a function to check if a string is a palindrome.',\n    inputExample: 'isPalindrome(\"racecar\")',\n    expectedOutput: 'True',\n    difficulty: 'easy',\n    language: 'python',\n    evaluationCriteria: ['Correctness', 'Code efficiency', 'Readability', 'Edge cases'],\n    timeLimit: 900\n  },\n  {\n    id: 'cp3',\n    problem: 'Create a class to represent a bank account with deposit, withdraw, and balance methods.',\n    inputExample: 'account = BankAccount(1000)\\naccount.deposit(500)\\naccount.withdraw(200)',\n    expectedOutput: 'Balance: 1300',\n    difficulty: 'medium',\n    language: 'python',\n    evaluationCriteria: ['Class design', 'Method implementation', 'Error handling', 'Code organization'],\n    timeLimit: 1200\n  }\n];\n\nclass AssessmentService {\n  // Generate 30 adaptive objective questions based on resume\n  async generateObjectiveQuestions(resumeData: any): Promise<ObjectiveQuestion[]> {\n    // In production, use OpenAI API to generate questions based on resume\n    // For now, return mock questions with some adaptation\n    const questions = [...mockObjectiveQuestions];\n    \n    // Add more questions to reach 30\n    for (let i = 6; i <= 30; i++) {\n      questions.push({\n        id: `q${i}`,\n        question: `Sample question ${i}: What is the output of this code?`,\n        options: ['Option A', 'Option B', 'Option C', 'Option D'],\n        correctAnswer: 'Option B',\n        topic: 'Programming',\n        difficulty: i % 3 === 0 ? 'hard' : i % 2 === 0 ? 'medium' : 'easy',\n        timeLimit: 60\n      });\n    }\n    \n    return questions;\n  }\n\n  // Generate communication test based on resume\n  async generateCommunicationTest(resumeData: any): Promise<CommunicationTest> {\n    // In production, customize based on resume\n    return mockCommunicationTest;\n  }\n\n  // Generate coding problems based on selected language and resume\n  async generateCodingProblems(language: string, resumeData: any): Promise<CodingProblem[]> {\n    // In production, generate problems based on language and resume\n    return mockCodingProblems.map(problem => ({\n      ...problem,\n      language: language\n    }));\n  }\n\n  // Evaluate objective test answers\n  async evaluateObjectiveTest(questions: ObjectiveQuestion[], answers: { [key: string]: string }): Promise<number> {\n    let score = 0;\n    questions.forEach(question => {\n      if (answers[question.id] === question.correctAnswer) {\n        score++;\n      }\n    });\n    return score;\n  }\n\n  // Evaluate communication test\n  async evaluateCommunicationTest(\n    writtenResponse: string, \n    audioBlob: Blob | null, \n    test: CommunicationTest\n  ): Promise<{ written: number; spoken: number }> {\n    // In production, use AI to evaluate responses\n    // For now, return mock scores\n    const writtenScore = Math.min(95, 70 + Math.random() * 25);\n    const spokenScore = Math.min(95, 70 + Math.random() * 25);\n    \n    return {\n      written: Math.round(writtenScore),\n      spoken: Math.round(spokenScore)\n    };\n  }\n\n  // Evaluate coding test\n  async evaluateCodingTest(problems: CodingProblem[], solutions: { [key: string]: string }): Promise<number> {\n    // In production, use AI to evaluate code\n    // For now, return mock score\n    return Math.min(100, 80 + Math.random() * 20);\n  }\n\n  // Generate final assessment result\n  async generateFinalResult(data: any): Promise<AssessmentResult> {\n    // In production, generate comprehensive result\n    return {\n      candidateId: data.candidateId,\n      name: data.name,\n      email: data.email,\n      resumeHighlights: data.resumeHighlights || [],\n      objectiveTest: data.objectiveTest,\n      communicationTest: data.communicationTest,\n      codingTest: data.codingTest,\n      proctoringViolations: data.proctoringViolations || 0,\n      finalStatus: data.finalStatus,\n      eligibleForInterview: data.eligibleForInterview,\n      sponsorshipApproved: data.sponsorshipApproved,\n      assessmentDate: new Date().toISOString()\n    };\n  }\n\n  // Send result email\n  async sendResultEmail(result: AssessmentResult): Promise<void> {\n    // In production, send actual email\n    console.log('Sending result email:', result);\n    \n    if (result.finalStatus === 'Passed') {\n      // Send congratulatory email\n      console.log('Sending congratulatory email to:', result.email);\n    } else {\n      // Send failure email with feedback\n      console.log('Sending failure email to:', result.email);\n    }\n  }\n\n  // Generate questions for specific round\n  async generateQuestions(round: number, resumeData: any): Promise<any[]> {\n    // In production, generate questions based on round and resume\n    return [];\n  }\n\n  // Evaluate answers for specific round\n  async evaluateAnswers(round: number, questions: any[], answers: any[]): Promise<any> {\n    // In production, evaluate answers using AI\n    return { score: 85, feedback: 'Good performance' };\n  }\n\n  // Check if candidate can start assessment\n  canStartAssessment(): boolean {\n    // In production, check database for eligibility\n    return true;\n  }\n\n  // Get assessment data\n  async getAssessmentData(candidateId: string): Promise<AssessmentData | null> {\n    // In production, fetch from database\n    return null;\n  }\n\n  // Save assessment data\n  async saveAssessmentData(data: AssessmentData): Promise<void> {\n    // In production, save to database\n    console.log('Saving assessment data:', data);\n  }\n\n  // Generate feedback report\n  async generateFeedbackReport(result: AssessmentResult): Promise<string> {\n    const feedback = `\nAssessment Feedback Report\n========================\n\nCandidate: ${result.name}\nAssessment Date: ${result.assessmentDate}\nFinal Status: ${result.finalStatus}\n\nObjective Test: ${result.objectiveTest.score}/30 (${result.objectiveTest.pass ? 'Passed' : 'Failed'})\nCommunication Test: Written ${result.communicationTest.written}%, Spoken ${result.communicationTest.spoken}% (${result.communicationTest.pass ? 'Passed' : 'Failed'})\nCoding Test: ${result.codingTest.score}% (${result.codingTest.pass ? 'Passed' : 'Failed'})\n\nStrengths:\n- Strong technical foundation\n- Good problem-solving skills\n- Effective communication\n\nAreas for Improvement:\n- Practice more coding problems\n- Improve time management\n- Enhance technical vocabulary\n\nRecommendations:\n- Complete online coding challenges\n- Practice system design concepts\n- Improve communication skills\n\nNext Steps:\n${result.finalStatus === 'Passed' ? \n  '- Eligible for final interview\\n- Prepare for technical discussion\\n- Review company culture' : \n  '- Retake assessment after 30 days\\n- Focus on weak areas\\n- Practice regularly'\n}\n    `;\n    \n    return feedback;\n  }\n}\n\nexport const assessmentService = new AssessmentService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}