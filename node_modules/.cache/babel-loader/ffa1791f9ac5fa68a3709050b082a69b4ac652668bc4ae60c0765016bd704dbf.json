{"ast":null,"code":"import _objectSpread from\"C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Authentication Service for Assessment System\nclass AuthService{constructor(){this.currentUser=null;this.token=null;// Load user from localStorage on initialization\nthis.loadUserFromStorage();}async signup(data){try{// Validate input\nif(!data.name||!data.email||!data.password){return{success:false,error:'All required fields must be filled'};}if(!this.isValidEmail(data.email)){return{success:false,error:'Invalid email format'};}if(data.password.length<8){return{success:false,error:'Password must be at least 8 characters long'};}// Check if user already exists\nconst existingUser=this.getUserByEmail(data.email);if(existingUser){return{success:false,error:'User with this email already exists'};}// Create new user\nconst newUser={id:this.generateUserId(),email:data.email,name:data.name,phone:data.phone,location:data.location,profileComplete:false,assessmentCompleted:false,createdAt:new Date().toISOString(),lastLoginAt:new Date().toISOString()};// Save user to localStorage (in production, this would be an API call)\nthis.saveUser(newUser);this.setCurrentUser(newUser);return{success:true,user:newUser};}catch(error){return{success:false,error:'Failed to create account'};}}async login(credentials){try{const user=this.getUserByEmail(credentials.email);if(!user){return{success:false,error:'User not found'};}// In a real app, you'd verify the password hash\n// For now, we'll just check if the user exists\nthis.setCurrentUser(user);this.updateLastLogin(user.id);return{success:true,user};}catch(error){return{success:false,error:'Login failed'};}}async logout(){this.currentUser=null;this.token=null;localStorage.removeItem('currentUser');localStorage.removeItem('authToken');}async updateProfile(profileData){try{if(!this.currentUser){return{success:false,error:'User not authenticated'};}// Update user profile\nconst updatedUser=_objectSpread(_objectSpread({},this.currentUser),{},{name:profileData.name,email:profileData.email,phone:profileData.phone,location:profileData.location,profileComplete:this.isProfileComplete(profileData)});this.saveUser(updatedUser);this.setCurrentUser(updatedUser);return{success:true,user:updatedUser};}catch(error){return{success:false,error:'Failed to update profile'};}}async uploadResume(resumeFile){try{if(!this.currentUser){return{success:false,error:'User not authenticated'};}// Validate file\nif(!this.isValidResumeFile(resumeFile)){return{success:false,error:'Invalid file format. Please upload PDF, DOC, or DOCX files.'};}if(resumeFile.size>10*1024*1024){// 10MB limit\nreturn{success:false,error:'File size too large. Maximum size is 10MB.'};}// In a real app, you'd upload to a cloud storage service\n// For now, we'll just mark the profile as complete\nconst updatedUser=_objectSpread(_objectSpread({},this.currentUser),{},{profileComplete:true});this.saveUser(updatedUser);this.setCurrentUser(updatedUser);return{success:true};}catch(error){return{success:false,error:'Failed to upload resume'};}}canStartAssessment(){var _this$currentUser,_this$currentUser2;return((_this$currentUser=this.currentUser)===null||_this$currentUser===void 0?void 0:_this$currentUser.profileComplete)===true&&!((_this$currentUser2=this.currentUser)!==null&&_this$currentUser2!==void 0&&_this$currentUser2.assessmentCompleted);}hasCompletedAssessment(){var _this$currentUser3;return((_this$currentUser3=this.currentUser)===null||_this$currentUser3===void 0?void 0:_this$currentUser3.assessmentCompleted)===true;}getCurrentUser(){return this.currentUser;}isAuthenticated(){return this.currentUser!==null;}setCurrentUser(user){this.currentUser=user;localStorage.setItem('currentUser',JSON.stringify(user));}loadUserFromStorage(){try{const storedUser=localStorage.getItem('currentUser');if(storedUser){this.currentUser=JSON.parse(storedUser);}}catch(error){console.error('Error loading user from storage:',error);}}saveUser(user){try{const users=this.getAllUsers();const existingIndex=users.findIndex(u=>u.id===user.id);if(existingIndex>=0){users[existingIndex]=user;}else{users.push(user);}localStorage.setItem('users',JSON.stringify(users));}catch(error){console.error('Error saving user:',error);}}getAllUsers(){try{const stored=localStorage.getItem('users');return stored?JSON.parse(stored):[];}catch(error){console.error('Error loading users:',error);return[];}}getUserByEmail(email){const users=this.getAllUsers();return users.find(user=>user.email===email)||null;}updateLastLogin(userId){const users=this.getAllUsers();const userIndex=users.findIndex(u=>u.id===userId);if(userIndex>=0){users[userIndex].lastLoginAt=new Date().toISOString();localStorage.setItem('users',JSON.stringify(users));}}generateUserId(){return'user_'+Date.now()+'_'+Math.random().toString(36).substr(2,9);}isValidEmail(email){const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);}isValidResumeFile(file){const allowedTypes=['application/pdf','application/msword','application/vnd.openxmlformats-officedocument.wordprocessingml.document'];return allowedTypes.includes(file.type);}isProfileComplete(profileData){return!!(profileData.name&&profileData.email&&profileData.phone&&profileData.location);}}export const authService=new AuthService();","map":{"version":3,"names":["AuthService","constructor","currentUser","token","loadUserFromStorage","signup","data","name","email","password","success","error","isValidEmail","length","existingUser","getUserByEmail","newUser","id","generateUserId","phone","location","profileComplete","assessmentCompleted","createdAt","Date","toISOString","lastLoginAt","saveUser","setCurrentUser","user","login","credentials","updateLastLogin","logout","localStorage","removeItem","updateProfile","profileData","updatedUser","_objectSpread","isProfileComplete","uploadResume","resumeFile","isValidResumeFile","size","canStartAssessment","_this$currentUser","_this$currentUser2","hasCompletedAssessment","_this$currentUser3","getCurrentUser","isAuthenticated","setItem","JSON","stringify","storedUser","getItem","parse","console","users","getAllUsers","existingIndex","findIndex","u","push","stored","find","userId","userIndex","now","Math","random","toString","substr","emailRegex","test","file","allowedTypes","includes","type","authService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/authService.ts"],"sourcesContent":["// Authentication Service for Assessment System\r\nexport interface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  phone?: string;\r\n  location?: string;\r\n  profileComplete: boolean;\r\n  assessmentCompleted: boolean;\r\n  assessmentScore?: number;\r\n  createdAt: string;\r\n  lastLoginAt: string;\r\n}\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface SignupData {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  phone?: string;\r\n  location?: string;\r\n}\r\n\r\nexport interface ProfileData {\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  location?: string;\r\n  resume?: File;\r\n  skills?: string[];\r\n  experience?: string[];\r\n  education?: string[];\r\n  projects?: string[];\r\n  certifications?: string[];\r\n}\r\n\r\nclass AuthService {\r\n  private currentUser: User | null = null;\r\n  private token: string | null = null;\r\n\r\n  constructor() {\r\n    // Load user from localStorage on initialization\r\n    this.loadUserFromStorage();\r\n  }\r\n\r\n  async signup(data: SignupData): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      // Validate input\r\n      if (!data.name || !data.email || !data.password) {\r\n        return { success: false, error: 'All required fields must be filled' };\r\n      }\r\n\r\n      if (!this.isValidEmail(data.email)) {\r\n        return { success: false, error: 'Invalid email format' };\r\n      }\r\n\r\n      if (data.password.length < 8) {\r\n        return { success: false, error: 'Password must be at least 8 characters long' };\r\n      }\r\n\r\n      // Check if user already exists\r\n      const existingUser = this.getUserByEmail(data.email);\r\n      if (existingUser) {\r\n        return { success: false, error: 'User with this email already exists' };\r\n      }\r\n\r\n      // Create new user\r\n      const newUser: User = {\r\n        id: this.generateUserId(),\r\n        email: data.email,\r\n        name: data.name,\r\n        phone: data.phone,\r\n        location: data.location,\r\n        profileComplete: false,\r\n        assessmentCompleted: false,\r\n        createdAt: new Date().toISOString(),\r\n        lastLoginAt: new Date().toISOString()\r\n      };\r\n\r\n      // Save user to localStorage (in production, this would be an API call)\r\n      this.saveUser(newUser);\r\n      this.setCurrentUser(newUser);\r\n\r\n      return { success: true, user: newUser };\r\n    } catch (error) {\r\n      return { success: false, error: 'Failed to create account' };\r\n    }\r\n  }\r\n\r\n  async login(credentials: LoginCredentials): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      const user = this.getUserByEmail(credentials.email);\r\n      \r\n      if (!user) {\r\n        return { success: false, error: 'User not found' };\r\n      }\r\n\r\n      // In a real app, you'd verify the password hash\r\n      // For now, we'll just check if the user exists\r\n      this.setCurrentUser(user);\r\n      this.updateLastLogin(user.id);\r\n\r\n      return { success: true, user };\r\n    } catch (error) {\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    this.currentUser = null;\r\n    this.token = null;\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('authToken');\r\n  }\r\n\r\n  async updateProfile(profileData: ProfileData): Promise<{ success: boolean; user?: User; error?: string }> {\r\n    try {\r\n      if (!this.currentUser) {\r\n        return { success: false, error: 'User not authenticated' };\r\n      }\r\n\r\n      // Update user profile\r\n      const updatedUser: User = {\r\n        ...this.currentUser,\r\n        name: profileData.name,\r\n        email: profileData.email,\r\n        phone: profileData.phone,\r\n        location: profileData.location,\r\n        profileComplete: this.isProfileComplete(profileData)\r\n      };\r\n\r\n      this.saveUser(updatedUser);\r\n      this.setCurrentUser(updatedUser);\r\n\r\n      return { success: true, user: updatedUser };\r\n    } catch (error) {\r\n      return { success: false, error: 'Failed to update profile' };\r\n    }\r\n  }\r\n\r\n  async uploadResume(resumeFile: File): Promise<{ success: boolean; error?: string }> {\r\n    try {\r\n      if (!this.currentUser) {\r\n        return { success: false, error: 'User not authenticated' };\r\n      }\r\n\r\n      // Validate file\r\n      if (!this.isValidResumeFile(resumeFile)) {\r\n        return { success: false, error: 'Invalid file format. Please upload PDF, DOC, or DOCX files.' };\r\n      }\r\n\r\n      if (resumeFile.size > 10 * 1024 * 1024) { // 10MB limit\r\n        return { success: false, error: 'File size too large. Maximum size is 10MB.' };\r\n      }\r\n\r\n      // In a real app, you'd upload to a cloud storage service\r\n      // For now, we'll just mark the profile as complete\r\n      const updatedUser: User = {\r\n        ...this.currentUser,\r\n        profileComplete: true\r\n      };\r\n\r\n      this.saveUser(updatedUser);\r\n      this.setCurrentUser(updatedUser);\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: 'Failed to upload resume' };\r\n    }\r\n  }\r\n\r\n  canStartAssessment(): boolean {\r\n    return this.currentUser?.profileComplete === true && !this.currentUser?.assessmentCompleted;\r\n  }\r\n\r\n  hasCompletedAssessment(): boolean {\r\n    return this.currentUser?.assessmentCompleted === true;\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUser;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.currentUser !== null;\r\n  }\r\n\r\n  private setCurrentUser(user: User): void {\r\n    this.currentUser = user;\r\n    localStorage.setItem('currentUser', JSON.stringify(user));\r\n  }\r\n\r\n  private loadUserFromStorage(): void {\r\n    try {\r\n      const storedUser = localStorage.getItem('currentUser');\r\n      if (storedUser) {\r\n        this.currentUser = JSON.parse(storedUser);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading user from storage:', error);\r\n    }\r\n  }\r\n\r\n  private saveUser(user: User): void {\r\n    try {\r\n      const users = this.getAllUsers();\r\n      const existingIndex = users.findIndex(u => u.id === user.id);\r\n      \r\n      if (existingIndex >= 0) {\r\n        users[existingIndex] = user;\r\n      } else {\r\n        users.push(user);\r\n      }\r\n      \r\n      localStorage.setItem('users', JSON.stringify(users));\r\n    } catch (error) {\r\n      console.error('Error saving user:', error);\r\n    }\r\n  }\r\n\r\n  private getAllUsers(): User[] {\r\n    try {\r\n      const stored = localStorage.getItem('users');\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Error loading users:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private getUserByEmail(email: string): User | null {\r\n    const users = this.getAllUsers();\r\n    return users.find(user => user.email === email) || null;\r\n  }\r\n\r\n  private updateLastLogin(userId: string): void {\r\n    const users = this.getAllUsers();\r\n    const userIndex = users.findIndex(u => u.id === userId);\r\n    \r\n    if (userIndex >= 0) {\r\n      users[userIndex].lastLoginAt = new Date().toISOString();\r\n      localStorage.setItem('users', JSON.stringify(users));\r\n    }\r\n  }\r\n\r\n  private generateUserId(): string {\r\n    return 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  private isValidResumeFile(file: File): boolean {\r\n    const allowedTypes = [\r\n      'application/pdf',\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n    ];\r\n    return allowedTypes.includes(file.type);\r\n  }\r\n\r\n  private isProfileComplete(profileData: ProfileData): boolean {\r\n    return !!(\r\n      profileData.name &&\r\n      profileData.email &&\r\n      profileData.phone &&\r\n      profileData.location\r\n    );\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}