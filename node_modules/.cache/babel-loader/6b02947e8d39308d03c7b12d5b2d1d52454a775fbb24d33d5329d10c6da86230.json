{"ast":null,"code":"// ChatGPT Assessment Service\n// Note: In production, you would integrate with OpenAI API\n// For now, we'll use mock data for demonstration\nclass AssessmentService{constructor(){this.masterPrompt=\"You are an AI-powered assessment engine for an EdTech platform. \\nYou will control the entire flow of a 3-round candidate assessment:\\n\\n1. Round 1 \\u2013 Resume Parsing & Objective Test\\n   - Parse candidate's uploaded resume.\\n   - Extract skills, projects, certifications, achievements.\\n   - Generate 3\\u20135 personalized questions from resume.\\n   - Generate 3\\u20135 random industry questions (Python, Java, .NET, React.js, HTML).\\n   - Score answers (Correctness, Depth, Clarity).\\n   - Provide feedback and decide Pass/Fail.\\n\\n2. Round 2 \\u2013 Communication & Writing Test\\n   - Part A: Give a random scenario (customer complaint, missed deadline, crisis management).\\n   - Candidate writes an email reply \\u2192 evaluate for Grammar, Tone, Clarity, Professionalism.\\n   - Part B: Assign a random speaking topic.\\n   - Candidate uploads audio/video \\u2192 transcribe (via Whisper API) \\u2192 evaluate for Fluency, Pronunciation, Confidence, Relevance.\\n   - Provide feedback and decide Pass/Fail.\\n\\n3. Round 3 \\u2013 Logical & Coding Test\\n   - Ask candidate to select track: Python, Java, .NET, HTML, React.js.\\n   - Generate one coding or logic challenge for chosen track.\\n   - Candidate submits code \\u2192 run tests \\u2192 evaluate for Correctness, Efficiency, Quality, Time Management.\\n   - Provide feedback and decide Pass/Fail.\\n\\n4. Final Result\\n   - If passed all rounds \\u2192 Generate personalized success email + admin notification.\\n   - If failed \\u2192 Generate personalized rejection email + feedback.\\n   - Maintain log: Candidate name, round scores, strengths, weaknesses, final result.\\n\\nRules:\\n- Always be professional and encouraging.\\n- Adapt difficulty to freshers (beginner-friendly).\\n- Do not skip feedback.\\n- Use scoring rubrics fairly.\\n- You fully control progression (no manual approval needed).\";}async parseResume(resumeText){try{// Mock resume parsing - in production, integrate with OpenAI API\nconst mockData={skills:['JavaScript','React','Node.js','Python','SQL'],projects:['E-commerce Website','Task Management App','Data Analysis Tool'],certifications:['AWS Certified Developer','Google Cloud Professional'],achievements:['Dean\\'s List','Hackathon Winner','Open Source Contributor'],experience:['Software Developer at TechCorp','Intern at StartupXYZ'],education:['Bachelor of Computer Science','Master of Software Engineering']};return mockData;}catch(error){console.error('Error parsing resume:',error);throw new Error('Failed to parse resume');}}async generateQuestions(round,resumeData,track){try{// Mock question generation - in production, integrate with OpenAI API\nif(round===1){return[{id:'q1',question:'Explain the difference between let, const, and var in JavaScript.',type:'technical',difficulty:'medium',category:'JavaScript'},{id:'q2',question:'What is the purpose of React hooks and how do they work?',type:'technical',difficulty:'medium',category:'React'},{id:'q3',question:'Describe your experience with database design and normalization.',type:'resume_based',difficulty:'medium',category:'Database'},{id:'q4',question:'What is the difference between SQL and NoSQL databases?',type:'general',difficulty:'easy',category:'Database'},{id:'q5',question:'How would you handle a situation where your code is not working as expected?',type:'general',difficulty:'easy',category:'Problem Solving'}];}else if(round===2){return[{id:'email',question:'Write an email to a client explaining that their project delivery will be delayed by 2 days due to unexpected technical challenges.',type:'communication',difficulty:'medium',category:'Email Writing'},{id:'speaking',question:'Present your most challenging project and how you overcame the difficulties.',type:'communication',difficulty:'medium',category:'Speaking'}];}else if(round===3){return[{id:'coding',question:\"Write a function that takes an array of integers and returns the two numbers that add up to a specific target sum. For example, if the array is [2, 7, 11, 15] and the target is 9, return [2, 7].\",type:'coding',difficulty:'medium',category:track||'Python'}];}return[];}catch(error){console.error('Error generating questions:',error);throw new Error('Failed to generate questions');}}async evaluateAnswers(round,questions,answers){try{// Mock evaluation - in production, integrate with OpenAI API\nconst mockScores=[75,82,68,90,85];// Random scores for demonstration\nconst randomScore=mockScores[Math.floor(Math.random()*mockScores.length)];const mockFeedback=['Good understanding of the concepts. Consider providing more detailed examples.','Excellent technical knowledge. Well-structured response with clear explanations.','Solid foundation but could benefit from more practical experience.','Outstanding performance. Demonstrates strong problem-solving skills.','Good attempt. Focus on improving code efficiency and best practices.'];const randomFeedback=mockFeedback[Math.floor(Math.random()*mockFeedback.length)];return{round,score:randomScore,maxScore:100,passed:randomScore>=(round===1?60:70),feedback:randomFeedback,details:{correctness:Math.floor(randomScore*0.4),depth:Math.floor(randomScore*0.3),clarity:Math.floor(randomScore*0.3)}};}catch(error){console.error('Error evaluating answers:',error);throw new Error('Failed to evaluate answers');}}async transcribeAudio(audioFile){try{// Mock transcription - in production, integrate with Whisper API\nreturn'This is a mock transcription of the audio recording. In production, this would be processed by OpenAI Whisper API.';}catch(error){console.error('Error transcribing audio:',error);throw new Error('Failed to transcribe audio');}}async generateFinalResult(assessmentData){try{const allPassed=assessmentData.scores.round1>60&&assessmentData.scores.round2>70&&assessmentData.scores.round3>70;// Mock final result generation - in production, integrate with OpenAI API\nconst emailContent=allPassed?\"Congratulations \".concat(assessmentData.candidateName,\"! You have successfully passed the TechAcademy Assessment. Your scores: Round 1: \").concat(assessmentData.scores.round1,\"%, Round 2: \").concat(assessmentData.scores.round2,\"%, Round 3: \").concat(assessmentData.scores.round3,\"%. We will contact you soon with next steps.\"):\"Thank you for completing the TechAcademy Assessment, \".concat(assessmentData.candidateName,\". While you didn't pass this time, we encourage you to review the feedback and consider reapplying in the future. Your scores: Round 1: \").concat(assessmentData.scores.round1,\"%, Round 2: \").concat(assessmentData.scores.round2,\"%, Round 3: \").concat(assessmentData.scores.round3,\"%.\");const adminNotification=\"Assessment completed for \".concat(assessmentData.candidateName,\" (\").concat(assessmentData.candidateEmail,\"). Result: \").concat(allPassed?'PASSED':'FAILED',\". Scores: R1: \").concat(assessmentData.scores.round1,\"%, R2: \").concat(assessmentData.scores.round2,\"%, R3: \").concat(assessmentData.scores.round3,\"%.\");return{success:allPassed,emailContent,adminNotification,analytics:{totalCandidates:1,passRate:allPassed?100:0,averageScore:Math.round((assessmentData.scores.round1+assessmentData.scores.round2+assessmentData.scores.round3)/3)}};}catch(error){console.error('Error generating final result:',error);throw new Error('Failed to generate final result');}}async runCodeTests(code,language,testCases){try{// Mock code execution - in production, integrate with Judge0 API\nconst mockResults={passed:Math.floor(Math.random()*testCases.length)+1,total:testCases.length,results:[{stdout:'Mock execution result',stderr:'',time:'0.1s',memory:'1024KB'}]};return mockResults;}catch(error){console.error('Error running code tests:',error);throw new Error('Failed to run code tests');}}getLanguageId(language){const languageMap={'python':71,'java':62,'javascript':63,'csharp':51,'cpp':54,'c':50};return languageMap[language.toLowerCase()]||71;}}export const assessmentService=new AssessmentService();","map":{"version":3,"names":["AssessmentService","constructor","masterPrompt","parseResume","resumeText","mockData","skills","projects","certifications","achievements","experience","education","error","console","Error","generateQuestions","round","resumeData","track","id","question","type","difficulty","category","evaluateAnswers","questions","answers","mockScores","randomScore","Math","floor","random","length","mockFeedback","randomFeedback","score","maxScore","passed","feedback","details","correctness","depth","clarity","transcribeAudio","audioFile","generateFinalResult","assessmentData","allPassed","scores","round1","round2","round3","emailContent","concat","candidateName","adminNotification","candidateEmail","success","analytics","totalCandidates","passRate","averageScore","runCodeTests","code","language","testCases","mockResults","total","results","stdout","stderr","time","memory","getLanguageId","languageMap","toLowerCase","assessmentService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/assessmentService.ts"],"sourcesContent":["// ChatGPT Assessment Service\r\n// Note: In production, you would integrate with OpenAI API\r\n// For now, we'll use mock data for demonstration\r\n\r\nexport interface AssessmentData {\r\n  candidateId: string;\r\n  candidateName: string;\r\n  candidateEmail: string;\r\n  resumeText?: string;\r\n  currentRound: number;\r\n  totalRounds: number;\r\n  scores: {\r\n    round1?: number;\r\n    round2?: number;\r\n    round3?: number;\r\n  };\r\n  feedback: {\r\n    round1?: string;\r\n    round2?: string;\r\n    round3?: string;\r\n  };\r\n  status: 'in_progress' | 'completed' | 'failed';\r\n  strengths: string[];\r\n  weaknesses: string[];\r\n}\r\n\r\nexport interface ResumeData {\r\n  skills: string[];\r\n  projects: string[];\r\n  certifications: string[];\r\n  achievements: string[];\r\n  experience: string[];\r\n  education: string[];\r\n}\r\n\r\nexport interface Question {\r\n  id: string;\r\n  question: string;\r\n  type: 'technical' | 'general' | 'resume_based';\r\n  difficulty: 'easy' | 'medium' | 'hard';\r\n  category: string;\r\n}\r\n\r\nexport interface Answer {\r\n  questionId: string;\r\n  answer: string;\r\n  score?: number;\r\n  feedback?: string;\r\n}\r\n\r\nexport interface RoundResult {\r\n  round: number;\r\n  score: number;\r\n  maxScore: number;\r\n  passed: boolean;\r\n  feedback: string;\r\n  details: {\r\n    correctness: number;\r\n    depth: number;\r\n    clarity: number;\r\n    timeManagement?: number;\r\n    efficiency?: number;\r\n    codeQuality?: number;\r\n  };\r\n}\r\n\r\nclass AssessmentService {\r\n  private masterPrompt = `You are an AI-powered assessment engine for an EdTech platform. \r\nYou will control the entire flow of a 3-round candidate assessment:\r\n\r\n1. Round 1 – Resume Parsing & Objective Test\r\n   - Parse candidate's uploaded resume.\r\n   - Extract skills, projects, certifications, achievements.\r\n   - Generate 3–5 personalized questions from resume.\r\n   - Generate 3–5 random industry questions (Python, Java, .NET, React.js, HTML).\r\n   - Score answers (Correctness, Depth, Clarity).\r\n   - Provide feedback and decide Pass/Fail.\r\n\r\n2. Round 2 – Communication & Writing Test\r\n   - Part A: Give a random scenario (customer complaint, missed deadline, crisis management).\r\n   - Candidate writes an email reply → evaluate for Grammar, Tone, Clarity, Professionalism.\r\n   - Part B: Assign a random speaking topic.\r\n   - Candidate uploads audio/video → transcribe (via Whisper API) → evaluate for Fluency, Pronunciation, Confidence, Relevance.\r\n   - Provide feedback and decide Pass/Fail.\r\n\r\n3. Round 3 – Logical & Coding Test\r\n   - Ask candidate to select track: Python, Java, .NET, HTML, React.js.\r\n   - Generate one coding or logic challenge for chosen track.\r\n   - Candidate submits code → run tests → evaluate for Correctness, Efficiency, Quality, Time Management.\r\n   - Provide feedback and decide Pass/Fail.\r\n\r\n4. Final Result\r\n   - If passed all rounds → Generate personalized success email + admin notification.\r\n   - If failed → Generate personalized rejection email + feedback.\r\n   - Maintain log: Candidate name, round scores, strengths, weaknesses, final result.\r\n\r\nRules:\r\n- Always be professional and encouraging.\r\n- Adapt difficulty to freshers (beginner-friendly).\r\n- Do not skip feedback.\r\n- Use scoring rubrics fairly.\r\n- You fully control progression (no manual approval needed).`;\r\n\r\n  async parseResume(resumeText: string): Promise<ResumeData> {\r\n    try {\r\n      // Mock resume parsing - in production, integrate with OpenAI API\r\n      const mockData: ResumeData = {\r\n        skills: ['JavaScript', 'React', 'Node.js', 'Python', 'SQL'],\r\n        projects: ['E-commerce Website', 'Task Management App', 'Data Analysis Tool'],\r\n        certifications: ['AWS Certified Developer', 'Google Cloud Professional'],\r\n        achievements: ['Dean\\'s List', 'Hackathon Winner', 'Open Source Contributor'],\r\n        experience: ['Software Developer at TechCorp', 'Intern at StartupXYZ'],\r\n        education: ['Bachelor of Computer Science', 'Master of Software Engineering']\r\n      };\r\n      \r\n      return mockData;\r\n    } catch (error) {\r\n      console.error('Error parsing resume:', error);\r\n      throw new Error('Failed to parse resume');\r\n    }\r\n  }\r\n\r\n  async generateQuestions(round: number, resumeData?: ResumeData, track?: string): Promise<Question[]> {\r\n    try {\r\n      // Mock question generation - in production, integrate with OpenAI API\r\n      if (round === 1) {\r\n        return [\r\n          {\r\n            id: 'q1',\r\n            question: 'Explain the difference between let, const, and var in JavaScript.',\r\n            type: 'technical',\r\n            difficulty: 'medium',\r\n            category: 'JavaScript'\r\n          },\r\n          {\r\n            id: 'q2',\r\n            question: 'What is the purpose of React hooks and how do they work?',\r\n            type: 'technical',\r\n            difficulty: 'medium',\r\n            category: 'React'\r\n          },\r\n          {\r\n            id: 'q3',\r\n            question: 'Describe your experience with database design and normalization.',\r\n            type: 'resume_based',\r\n            difficulty: 'medium',\r\n            category: 'Database'\r\n          },\r\n          {\r\n            id: 'q4',\r\n            question: 'What is the difference between SQL and NoSQL databases?',\r\n            type: 'general',\r\n            difficulty: 'easy',\r\n            category: 'Database'\r\n          },\r\n          {\r\n            id: 'q5',\r\n            question: 'How would you handle a situation where your code is not working as expected?',\r\n            type: 'general',\r\n            difficulty: 'easy',\r\n            category: 'Problem Solving'\r\n          }\r\n        ];\r\n      } else if (round === 2) {\r\n        return [\r\n          {\r\n            id: 'email',\r\n            question: 'Write an email to a client explaining that their project delivery will be delayed by 2 days due to unexpected technical challenges.',\r\n            type: 'communication',\r\n            difficulty: 'medium',\r\n            category: 'Email Writing'\r\n          },\r\n          {\r\n            id: 'speaking',\r\n            question: 'Present your most challenging project and how you overcame the difficulties.',\r\n            type: 'communication',\r\n            difficulty: 'medium',\r\n            category: 'Speaking'\r\n          }\r\n        ];\r\n      } else if (round === 3) {\r\n        return [\r\n          {\r\n            id: 'coding',\r\n            question: `Write a function that takes an array of integers and returns the two numbers that add up to a specific target sum. For example, if the array is [2, 7, 11, 15] and the target is 9, return [2, 7].`,\r\n            type: 'coding',\r\n            difficulty: 'medium',\r\n            category: track || 'Python'\r\n          }\r\n        ];\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error generating questions:', error);\r\n      throw new Error('Failed to generate questions');\r\n    }\r\n  }\r\n\r\n  async evaluateAnswers(round: number, questions: Question[], answers: Answer[]): Promise<RoundResult> {\r\n    try {\r\n      // Mock evaluation - in production, integrate with OpenAI API\r\n      const mockScores = [75, 82, 68, 90, 85]; // Random scores for demonstration\r\n      const randomScore = mockScores[Math.floor(Math.random() * mockScores.length)];\r\n      \r\n      const mockFeedback = [\r\n        'Good understanding of the concepts. Consider providing more detailed examples.',\r\n        'Excellent technical knowledge. Well-structured response with clear explanations.',\r\n        'Solid foundation but could benefit from more practical experience.',\r\n        'Outstanding performance. Demonstrates strong problem-solving skills.',\r\n        'Good attempt. Focus on improving code efficiency and best practices.'\r\n      ];\r\n      \r\n      const randomFeedback = mockFeedback[Math.floor(Math.random() * mockFeedback.length)];\r\n      \r\n      return {\r\n        round,\r\n        score: randomScore,\r\n        maxScore: 100,\r\n        passed: randomScore >= (round === 1 ? 60 : 70),\r\n        feedback: randomFeedback,\r\n        details: {\r\n          correctness: Math.floor(randomScore * 0.4),\r\n          depth: Math.floor(randomScore * 0.3),\r\n          clarity: Math.floor(randomScore * 0.3)\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error evaluating answers:', error);\r\n      throw new Error('Failed to evaluate answers');\r\n    }\r\n  }\r\n\r\n  async transcribeAudio(audioFile: File): Promise<string> {\r\n    try {\r\n      // Mock transcription - in production, integrate with Whisper API\r\n      return 'This is a mock transcription of the audio recording. In production, this would be processed by OpenAI Whisper API.';\r\n    } catch (error) {\r\n      console.error('Error transcribing audio:', error);\r\n      throw new Error('Failed to transcribe audio');\r\n    }\r\n  }\r\n\r\n  async generateFinalResult(assessmentData: AssessmentData): Promise<{\r\n    success: boolean;\r\n    emailContent: string;\r\n    adminNotification: string;\r\n    analytics: any;\r\n  }> {\r\n    try {\r\n      const allPassed = assessmentData.scores.round1! > 60 && \r\n                       assessmentData.scores.round2! > 70 && \r\n                       assessmentData.scores.round3! > 70;\r\n\r\n      // Mock final result generation - in production, integrate with OpenAI API\r\n      const emailContent = allPassed \r\n        ? `Congratulations ${assessmentData.candidateName}! You have successfully passed the TechAcademy Assessment. Your scores: Round 1: ${assessmentData.scores.round1}%, Round 2: ${assessmentData.scores.round2}%, Round 3: ${assessmentData.scores.round3}%. We will contact you soon with next steps.`\r\n        : `Thank you for completing the TechAcademy Assessment, ${assessmentData.candidateName}. While you didn't pass this time, we encourage you to review the feedback and consider reapplying in the future. Your scores: Round 1: ${assessmentData.scores.round1}%, Round 2: ${assessmentData.scores.round2}%, Round 3: ${assessmentData.scores.round3}%.`;\r\n\r\n      const adminNotification = `Assessment completed for ${assessmentData.candidateName} (${assessmentData.candidateEmail}). Result: ${allPassed ? 'PASSED' : 'FAILED'}. Scores: R1: ${assessmentData.scores.round1}%, R2: ${assessmentData.scores.round2}%, R3: ${assessmentData.scores.round3}%.`;\r\n      \r\n      return {\r\n        success: allPassed,\r\n        emailContent,\r\n        adminNotification,\r\n        analytics: {\r\n          totalCandidates: 1,\r\n          passRate: allPassed ? 100 : 0,\r\n          averageScore: Math.round((assessmentData.scores.round1! + assessmentData.scores.round2! + assessmentData.scores.round3!) / 3)\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error generating final result:', error);\r\n      throw new Error('Failed to generate final result');\r\n    }\r\n  }\r\n\r\n  async runCodeTests(code: string, language: string, testCases: any[]): Promise<{\r\n    passed: number;\r\n    total: number;\r\n    results: any[];\r\n  }> {\r\n    try {\r\n      // Mock code execution - in production, integrate with Judge0 API\r\n      const mockResults = {\r\n        passed: Math.floor(Math.random() * testCases.length) + 1,\r\n        total: testCases.length,\r\n        results: [{\r\n          stdout: 'Mock execution result',\r\n          stderr: '',\r\n          time: '0.1s',\r\n          memory: '1024KB'\r\n        }]\r\n      };\r\n      \r\n      return mockResults;\r\n    } catch (error) {\r\n      console.error('Error running code tests:', error);\r\n      throw new Error('Failed to run code tests');\r\n    }\r\n  }\r\n\r\n  private getLanguageId(language: string): number {\r\n    const languageMap: { [key: string]: number } = {\r\n      'python': 71,\r\n      'java': 62,\r\n      'javascript': 63,\r\n      'csharp': 51,\r\n      'cpp': 54,\r\n      'c': 50\r\n    };\r\n    return languageMap[language.toLowerCase()] || 71;\r\n  }\r\n}\r\n\r\nexport const assessmentService = new AssessmentService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}