{"ast":null,"code":"// ChatGPT Assessment Service\n// Note: In production, you would integrate with OpenAI API\n// For now, we'll use mock data for demonstration\n\nclass AssessmentService {\n  constructor() {\n    this.masterPrompt = `You are an AI-powered assessment engine for an EdTech platform. \nYou will control the entire flow of a 3-round candidate assessment:\n\n1. Round 1 – Resume Parsing & Objective Test\n   - Parse candidate's uploaded resume.\n   - Extract skills, projects, certifications, achievements.\n   - Generate 3–5 personalized questions from resume.\n   - Generate 3–5 random industry questions (Python, Java, .NET, React.js, HTML).\n   - Score answers (Correctness, Depth, Clarity).\n   - Provide feedback and decide Pass/Fail.\n\n2. Round 2 – Communication & Writing Test\n   - Part A: Give a random scenario (customer complaint, missed deadline, crisis management).\n   - Candidate writes an email reply → evaluate for Grammar, Tone, Clarity, Professionalism.\n   - Part B: Assign a random speaking topic.\n   - Candidate uploads audio/video → transcribe (via Whisper API) → evaluate for Fluency, Pronunciation, Confidence, Relevance.\n   - Provide feedback and decide Pass/Fail.\n\n3. Round 3 – Logical & Coding Test\n   - Ask candidate to select track: Python, Java, .NET, HTML, React.js.\n   - Generate one coding or logic challenge for chosen track.\n   - Candidate submits code → run tests → evaluate for Correctness, Efficiency, Quality, Time Management.\n   - Provide feedback and decide Pass/Fail.\n\n4. Final Result\n   - If passed all rounds → Generate personalized success email + admin notification.\n   - If failed → Generate personalized rejection email + feedback.\n   - Maintain log: Candidate name, round scores, strengths, weaknesses, final result.\n\nRules:\n- Always be professional and encouraging.\n- Adapt difficulty to freshers (beginner-friendly).\n- Do not skip feedback.\n- Use scoring rubrics fairly.\n- You fully control progression (no manual approval needed).`;\n  }\n  async parseResume(resumeText) {\n    try {\n      // Mock resume parsing - in production, integrate with OpenAI API\n      const mockData = {\n        skills: ['JavaScript', 'React', 'Node.js', 'Python', 'SQL'],\n        projects: ['E-commerce Website', 'Task Management App', 'Data Analysis Tool'],\n        certifications: ['AWS Certified Developer', 'Google Cloud Professional'],\n        achievements: ['Dean\\'s List', 'Hackathon Winner', 'Open Source Contributor'],\n        experience: ['Software Developer at TechCorp', 'Intern at StartupXYZ'],\n        education: ['Bachelor of Computer Science', 'Master of Software Engineering']\n      };\n      return mockData;\n    } catch (error) {\n      console.error('Error parsing resume:', error);\n      throw new Error('Failed to parse resume');\n    }\n  }\n  async generateQuestions(round, resumeData, track) {\n    try {\n      // Mock question generation - in production, integrate with OpenAI API\n      if (round === 1) {\n        return [{\n          id: 'q1',\n          question: 'Explain the difference between let, const, and var in JavaScript.',\n          type: 'technical',\n          difficulty: 'medium',\n          category: 'JavaScript'\n        }, {\n          id: 'q2',\n          question: 'What is the purpose of React hooks and how do they work?',\n          type: 'technical',\n          difficulty: 'medium',\n          category: 'React'\n        }, {\n          id: 'q3',\n          question: 'Describe your experience with database design and normalization.',\n          type: 'resume_based',\n          difficulty: 'medium',\n          category: 'Database'\n        }, {\n          id: 'q4',\n          question: 'What is the difference between SQL and NoSQL databases?',\n          type: 'general',\n          difficulty: 'easy',\n          category: 'Database'\n        }, {\n          id: 'q5',\n          question: 'How would you handle a situation where your code is not working as expected?',\n          type: 'general',\n          difficulty: 'easy',\n          category: 'Problem Solving'\n        }];\n      } else if (round === 2) {\n        return [{\n          id: 'email',\n          question: 'Write an email to a client explaining that their project delivery will be delayed by 2 days due to unexpected technical challenges.',\n          type: 'communication',\n          difficulty: 'medium',\n          category: 'Email Writing'\n        }, {\n          id: 'speaking',\n          question: 'Present your most challenging project and how you overcame the difficulties.',\n          type: 'communication',\n          difficulty: 'medium',\n          category: 'Speaking'\n        }];\n      } else if (round === 3) {\n        return [{\n          id: 'coding',\n          question: `Write a function that takes an array of integers and returns the two numbers that add up to a specific target sum. For example, if the array is [2, 7, 11, 15] and the target is 9, return [2, 7].`,\n          type: 'coding',\n          difficulty: 'medium',\n          category: track || 'Python'\n        }];\n      }\n      return [];\n    } catch (error) {\n      console.error('Error generating questions:', error);\n      throw new Error('Failed to generate questions');\n    }\n  }\n  async evaluateAnswers(round, questions, answers) {\n    try {\n      // Mock evaluation - in production, integrate with OpenAI API\n      const mockScores = [75, 82, 68, 90, 85]; // Random scores for demonstration\n      const randomScore = mockScores[Math.floor(Math.random() * mockScores.length)];\n      const mockFeedback = ['Good understanding of the concepts. Consider providing more detailed examples.', 'Excellent technical knowledge. Well-structured response with clear explanations.', 'Solid foundation but could benefit from more practical experience.', 'Outstanding performance. Demonstrates strong problem-solving skills.', 'Good attempt. Focus on improving code efficiency and best practices.'];\n      const randomFeedback = mockFeedback[Math.floor(Math.random() * mockFeedback.length)];\n      return {\n        round,\n        score: randomScore,\n        maxScore: 100,\n        passed: randomScore >= (round === 1 ? 60 : 70),\n        feedback: randomFeedback,\n        details: {\n          correctness: Math.floor(randomScore * 0.4),\n          depth: Math.floor(randomScore * 0.3),\n          clarity: Math.floor(randomScore * 0.3)\n        }\n      };\n    } catch (error) {\n      console.error('Error evaluating answers:', error);\n      throw new Error('Failed to evaluate answers');\n    }\n  }\n  async transcribeAudio(audioFile) {\n    try {\n      // Mock transcription - in production, integrate with Whisper API\n      return 'This is a mock transcription of the audio recording. In production, this would be processed by OpenAI Whisper API.';\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n      throw new Error('Failed to transcribe audio');\n    }\n  }\n  async generateFinalResult(assessmentData) {\n    try {\n      const allPassed = assessmentData.scores.round1 > 60 && assessmentData.scores.round2 > 70 && assessmentData.scores.round3 > 70;\n\n      // Mock final result generation - in production, integrate with OpenAI API\n      const emailContent = allPassed ? `Congratulations ${assessmentData.candidateName}! You have successfully passed the TechAcademy Assessment. Your scores: Round 1: ${assessmentData.scores.round1}%, Round 2: ${assessmentData.scores.round2}%, Round 3: ${assessmentData.scores.round3}%. We will contact you soon with next steps.` : `Thank you for completing the TechAcademy Assessment, ${assessmentData.candidateName}. While you didn't pass this time, we encourage you to review the feedback and consider reapplying in the future. Your scores: Round 1: ${assessmentData.scores.round1}%, Round 2: ${assessmentData.scores.round2}%, Round 3: ${assessmentData.scores.round3}%.`;\n      const adminNotification = `Assessment completed for ${assessmentData.candidateName} (${assessmentData.candidateEmail}). Result: ${allPassed ? 'PASSED' : 'FAILED'}. Scores: R1: ${assessmentData.scores.round1}%, R2: ${assessmentData.scores.round2}%, R3: ${assessmentData.scores.round3}%.`;\n      return {\n        success: allPassed,\n        emailContent,\n        adminNotification,\n        analytics: {\n          totalCandidates: 1,\n          passRate: allPassed ? 100 : 0,\n          averageScore: Math.round((assessmentData.scores.round1 + assessmentData.scores.round2 + assessmentData.scores.round3) / 3)\n        }\n      };\n    } catch (error) {\n      console.error('Error generating final result:', error);\n      throw new Error('Failed to generate final result');\n    }\n  }\n  async runCodeTests(code, language, testCases) {\n    try {\n      // Mock code execution - in production, integrate with Judge0 API\n      const mockResults = {\n        passed: Math.floor(Math.random() * testCases.length) + 1,\n        total: testCases.length,\n        results: [{\n          stdout: 'Mock execution result',\n          stderr: '',\n          time: '0.1s',\n          memory: '1024KB'\n        }]\n      };\n      return mockResults;\n    } catch (error) {\n      console.error('Error running code tests:', error);\n      throw new Error('Failed to run code tests');\n    }\n  }\n  getLanguageId(language) {\n    const languageMap = {\n      'python': 71,\n      'java': 62,\n      'javascript': 63,\n      'csharp': 51,\n      'cpp': 54,\n      'c': 50\n    };\n    return languageMap[language.toLowerCase()] || 71;\n  }\n}\nexport const assessmentService = new AssessmentService();","map":{"version":3,"names":["AssessmentService","constructor","masterPrompt","parseResume","resumeText","mockData","skills","projects","certifications","achievements","experience","education","error","console","Error","generateQuestions","round","resumeData","track","id","question","type","difficulty","category","evaluateAnswers","questions","answers","mockScores","randomScore","Math","floor","random","length","mockFeedback","randomFeedback","score","maxScore","passed","feedback","details","correctness","depth","clarity","transcribeAudio","audioFile","generateFinalResult","assessmentData","allPassed","scores","round1","round2","round3","emailContent","candidateName","adminNotification","candidateEmail","success","analytics","totalCandidates","passRate","averageScore","runCodeTests","code","language","testCases","mockResults","total","results","stdout","stderr","time","memory","getLanguageId","languageMap","toLowerCase","assessmentService"],"sources":["C:/Users/UdayaCharagundla/OneDrive - kyndryl/Desktop/golive/golive-cursor/techacademy/src/services/assessmentService.ts"],"sourcesContent":["// ChatGPT Assessment Service\n// Note: In production, you would integrate with OpenAI API\n// For now, we'll use mock data for demonstration\n\nexport interface AssessmentData {\n  candidateId: string;\n  candidateName: string;\n  candidateEmail: string;\n  resumeText?: string;\n  currentRound: number;\n  totalRounds: number;\n  scores: {\n    round1?: number;\n    round2?: number;\n    round3?: number;\n  };\n  feedback: {\n    round1?: string;\n    round2?: string;\n    round3?: string;\n  };\n  status: 'in_progress' | 'completed' | 'failed';\n  strengths: string[];\n  weaknesses: string[];\n}\n\nexport interface ResumeData {\n  skills: string[];\n  projects: string[];\n  certifications: string[];\n  achievements: string[];\n  experience: string[];\n  education: string[];\n}\n\nexport interface Question {\n  id: string;\n  question: string;\n  type: 'technical' | 'general' | 'resume_based' | 'communication' | 'coding';\n  difficulty: 'easy' | 'medium' | 'hard';\n  category: string;\n}\n\nexport interface Answer {\n  questionId: string;\n  answer: string;\n  score?: number;\n  feedback?: string;\n}\n\nexport interface RoundResult {\n  round: number;\n  score: number;\n  maxScore: number;\n  passed: boolean;\n  feedback: string;\n  details: {\n    correctness: number;\n    depth: number;\n    clarity: number;\n    timeManagement?: number;\n    efficiency?: number;\n    codeQuality?: number;\n  };\n}\n\nclass AssessmentService {\n  private masterPrompt = `You are an AI-powered assessment engine for an EdTech platform. \nYou will control the entire flow of a 3-round candidate assessment:\n\n1. Round 1 – Resume Parsing & Objective Test\n   - Parse candidate's uploaded resume.\n   - Extract skills, projects, certifications, achievements.\n   - Generate 3–5 personalized questions from resume.\n   - Generate 3–5 random industry questions (Python, Java, .NET, React.js, HTML).\n   - Score answers (Correctness, Depth, Clarity).\n   - Provide feedback and decide Pass/Fail.\n\n2. Round 2 – Communication & Writing Test\n   - Part A: Give a random scenario (customer complaint, missed deadline, crisis management).\n   - Candidate writes an email reply → evaluate for Grammar, Tone, Clarity, Professionalism.\n   - Part B: Assign a random speaking topic.\n   - Candidate uploads audio/video → transcribe (via Whisper API) → evaluate for Fluency, Pronunciation, Confidence, Relevance.\n   - Provide feedback and decide Pass/Fail.\n\n3. Round 3 – Logical & Coding Test\n   - Ask candidate to select track: Python, Java, .NET, HTML, React.js.\n   - Generate one coding or logic challenge for chosen track.\n   - Candidate submits code → run tests → evaluate for Correctness, Efficiency, Quality, Time Management.\n   - Provide feedback and decide Pass/Fail.\n\n4. Final Result\n   - If passed all rounds → Generate personalized success email + admin notification.\n   - If failed → Generate personalized rejection email + feedback.\n   - Maintain log: Candidate name, round scores, strengths, weaknesses, final result.\n\nRules:\n- Always be professional and encouraging.\n- Adapt difficulty to freshers (beginner-friendly).\n- Do not skip feedback.\n- Use scoring rubrics fairly.\n- You fully control progression (no manual approval needed).`;\n\n  async parseResume(resumeText: string): Promise<ResumeData> {\n    try {\n      // Mock resume parsing - in production, integrate with OpenAI API\n      const mockData: ResumeData = {\n        skills: ['JavaScript', 'React', 'Node.js', 'Python', 'SQL'],\n        projects: ['E-commerce Website', 'Task Management App', 'Data Analysis Tool'],\n        certifications: ['AWS Certified Developer', 'Google Cloud Professional'],\n        achievements: ['Dean\\'s List', 'Hackathon Winner', 'Open Source Contributor'],\n        experience: ['Software Developer at TechCorp', 'Intern at StartupXYZ'],\n        education: ['Bachelor of Computer Science', 'Master of Software Engineering']\n      };\n      \n      return mockData;\n    } catch (error) {\n      console.error('Error parsing resume:', error);\n      throw new Error('Failed to parse resume');\n    }\n  }\n\n  async generateQuestions(round: number, resumeData?: ResumeData, track?: string): Promise<Question[]> {\n    try {\n      // Mock question generation - in production, integrate with OpenAI API\n      if (round === 1) {\n        return [\n          {\n            id: 'q1',\n            question: 'Explain the difference between let, const, and var in JavaScript.',\n            type: 'technical',\n            difficulty: 'medium',\n            category: 'JavaScript'\n          },\n          {\n            id: 'q2',\n            question: 'What is the purpose of React hooks and how do they work?',\n            type: 'technical',\n            difficulty: 'medium',\n            category: 'React'\n          },\n          {\n            id: 'q3',\n            question: 'Describe your experience with database design and normalization.',\n            type: 'resume_based',\n            difficulty: 'medium',\n            category: 'Database'\n          },\n          {\n            id: 'q4',\n            question: 'What is the difference between SQL and NoSQL databases?',\n            type: 'general',\n            difficulty: 'easy',\n            category: 'Database'\n          },\n          {\n            id: 'q5',\n            question: 'How would you handle a situation where your code is not working as expected?',\n            type: 'general',\n            difficulty: 'easy',\n            category: 'Problem Solving'\n          }\n        ];\n      } else if (round === 2) {\n        return [\n          {\n            id: 'email',\n            question: 'Write an email to a client explaining that their project delivery will be delayed by 2 days due to unexpected technical challenges.',\n            type: 'communication',\n            difficulty: 'medium',\n            category: 'Email Writing'\n          },\n          {\n            id: 'speaking',\n            question: 'Present your most challenging project and how you overcame the difficulties.',\n            type: 'communication',\n            difficulty: 'medium',\n            category: 'Speaking'\n          }\n        ];\n      } else if (round === 3) {\n        return [\n          {\n            id: 'coding',\n            question: `Write a function that takes an array of integers and returns the two numbers that add up to a specific target sum. For example, if the array is [2, 7, 11, 15] and the target is 9, return [2, 7].`,\n            type: 'coding',\n            difficulty: 'medium',\n            category: track || 'Python'\n          }\n        ];\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error generating questions:', error);\n      throw new Error('Failed to generate questions');\n    }\n  }\n\n  async evaluateAnswers(round: number, questions: Question[], answers: Answer[]): Promise<RoundResult> {\n    try {\n      // Mock evaluation - in production, integrate with OpenAI API\n      const mockScores = [75, 82, 68, 90, 85]; // Random scores for demonstration\n      const randomScore = mockScores[Math.floor(Math.random() * mockScores.length)];\n      \n      const mockFeedback = [\n        'Good understanding of the concepts. Consider providing more detailed examples.',\n        'Excellent technical knowledge. Well-structured response with clear explanations.',\n        'Solid foundation but could benefit from more practical experience.',\n        'Outstanding performance. Demonstrates strong problem-solving skills.',\n        'Good attempt. Focus on improving code efficiency and best practices.'\n      ];\n      \n      const randomFeedback = mockFeedback[Math.floor(Math.random() * mockFeedback.length)];\n      \n      return {\n        round,\n        score: randomScore,\n        maxScore: 100,\n        passed: randomScore >= (round === 1 ? 60 : 70),\n        feedback: randomFeedback,\n        details: {\n          correctness: Math.floor(randomScore * 0.4),\n          depth: Math.floor(randomScore * 0.3),\n          clarity: Math.floor(randomScore * 0.3)\n        }\n      };\n    } catch (error) {\n      console.error('Error evaluating answers:', error);\n      throw new Error('Failed to evaluate answers');\n    }\n  }\n\n  async transcribeAudio(audioFile: File): Promise<string> {\n    try {\n      // Mock transcription - in production, integrate with Whisper API\n      return 'This is a mock transcription of the audio recording. In production, this would be processed by OpenAI Whisper API.';\n    } catch (error) {\n      console.error('Error transcribing audio:', error);\n      throw new Error('Failed to transcribe audio');\n    }\n  }\n\n  async generateFinalResult(assessmentData: AssessmentData): Promise<{\n    success: boolean;\n    emailContent: string;\n    adminNotification: string;\n    analytics: any;\n  }> {\n    try {\n      const allPassed = assessmentData.scores.round1! > 60 && \n                       assessmentData.scores.round2! > 70 && \n                       assessmentData.scores.round3! > 70;\n\n      // Mock final result generation - in production, integrate with OpenAI API\n      const emailContent = allPassed \n        ? `Congratulations ${assessmentData.candidateName}! You have successfully passed the TechAcademy Assessment. Your scores: Round 1: ${assessmentData.scores.round1}%, Round 2: ${assessmentData.scores.round2}%, Round 3: ${assessmentData.scores.round3}%. We will contact you soon with next steps.`\n        : `Thank you for completing the TechAcademy Assessment, ${assessmentData.candidateName}. While you didn't pass this time, we encourage you to review the feedback and consider reapplying in the future. Your scores: Round 1: ${assessmentData.scores.round1}%, Round 2: ${assessmentData.scores.round2}%, Round 3: ${assessmentData.scores.round3}%.`;\n\n      const adminNotification = `Assessment completed for ${assessmentData.candidateName} (${assessmentData.candidateEmail}). Result: ${allPassed ? 'PASSED' : 'FAILED'}. Scores: R1: ${assessmentData.scores.round1}%, R2: ${assessmentData.scores.round2}%, R3: ${assessmentData.scores.round3}%.`;\n      \n      return {\n        success: allPassed,\n        emailContent,\n        adminNotification,\n        analytics: {\n          totalCandidates: 1,\n          passRate: allPassed ? 100 : 0,\n          averageScore: Math.round((assessmentData.scores.round1! + assessmentData.scores.round2! + assessmentData.scores.round3!) / 3)\n        }\n      };\n    } catch (error) {\n      console.error('Error generating final result:', error);\n      throw new Error('Failed to generate final result');\n    }\n  }\n\n  async runCodeTests(code: string, language: string, testCases: any[]): Promise<{\n    passed: number;\n    total: number;\n    results: any[];\n  }> {\n    try {\n      // Mock code execution - in production, integrate with Judge0 API\n      const mockResults = {\n        passed: Math.floor(Math.random() * testCases.length) + 1,\n        total: testCases.length,\n        results: [{\n          stdout: 'Mock execution result',\n          stderr: '',\n          time: '0.1s',\n          memory: '1024KB'\n        }]\n      };\n      \n      return mockResults;\n    } catch (error) {\n      console.error('Error running code tests:', error);\n      throw new Error('Failed to run code tests');\n    }\n  }\n\n  private getLanguageId(language: string): number {\n    const languageMap: { [key: string]: number } = {\n      'python': 71,\n      'java': 62,\n      'javascript': 63,\n      'csharp': 51,\n      'cpp': 54,\n      'c': 50\n    };\n    return languageMap[language.toLowerCase()] || 71;\n  }\n}\n\nexport const assessmentService = new AssessmentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}